{"version":3,"sources":["resources/utils.js","resources/project.js","components/pages/InputFilePage.js","components/FactorInfoOverlay.js","components/Matrix.js","components/pages/IndirectPage.js","components/pages/DirectPage.js","components/CentralityTable.js","components/pages/CentralityPage.js","components/pages/ConstructionPage.js","components/pages/HomePage.js","components/InfluenceTable.js","components/Chart.js","components/pages/InfluencePage.js","components/pages/SettingsPage.js","components/pages/AllPage.js","components/EditableMatrix.js","components/pages/EditMatrixPage.js","components/Loop.js","components/pages/FeedbacksLoopPage.js","components/App.js","index.js","resources/color.js"],"names":["Colors","require","NUM_LOOPS","Objectify","theArray","returnMe","i","length","innerArray","j","push","data","parseInt","x","y","deepCopy","the2DArray","result","buildUnweightedAdjacency","theWeightedArray","getNums","setupInfluenceMap","theFactors","theInf","theDep","theColor","inner","name","inf","get","dep","color","setupTotalInfluenceMap","theIteInf","theIteDep","PRIMARY","SECONDARY","setupD3","theLoops","loops","slice","nodes","Obnodes","links","loop","forEach","element","includes","id","value","max","min","next","start","end","indexOf","RED","BLUE","Math","abs","source","target","sign","setupD3HighLights","theIndex","Set","add","getComplexity","numFactors","theLength","thePerc","getFrequency","freq","Map","factor","has","set","Object","_Users_charles_Documents_UWT_TCSS_498_PFMS_PFMS_APP_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","entries","sort","a","b","calculateConnectedPercentage","adjacency","_ref","vCount","concat","apply","filter","e","EMPTY_PROJECT","projectName","undefined","projectVersion","factorNames","editArrayObj","originalMatrix","graph","unweightedAdjacency","percentageConnected","direct","matrix","influence","dependence","eigenScores","rankMap","indirect","indirectN","feedbackLoops","options","loopLength","weightAlgorithm","loopCount","loopWeight","isAnalyzing","currentLoop","foundLoops","loadProjectFromPmf","project","longNames","map","nameObj","longFactorName","directInfluence","directDependence","directEigenScores","calculateCentralityVectors","directRanks","buildRankMap","iterate","indirectInfluence","indirectDependence","indirectEigenScores","indirectRanks","loadProjectFromCSV","fileText","parsedFile","JSON","parse","loadArray","toShortName","longName","trim","toUpperCase","alphaWhiteSpaceOnly","Array","prototype","call","c","char","toLowerCase","isAlpha","join","split","word","substring","genFrequencyTable","factorNameObjects","frequency","shortFactorName","factors","long","factorNameObject","from","_ref2","slicedToArray","_ref3","_ref4","shortname","count","adjustShortNames","array","setCurrentLoop","index","previousState","objectSpread","leftScores","obj","score","pageRankCentrality","rightScores","eigenvectorCentrality","info","keys","rightEigen","findIndex","leftEigen","InputFilePage","props","showFile","asyncToGenerator","regenerator_default","mark","_callee2","reader","wrap","_context2","prev","console","log","preventDefault","FileReader","onload","_callee","_context","document","getElementById","files","item","setProject","setLoaded","setNav","stop","_x2","this","arguments","readAsText","_x","react_default","createElement","className","type","onChange","accept","FactorInfoOverlay","OverlayTrigger","placement","key","overlay","Popover","Header","as","colorClass","style","paddingRight","Body","factorCount","calculateGradient","findMaxMin","hslToString","getComplement","Cell","STYLE","background","isDiag","isTop","fontWeight","Matrix","columns","factorHeaders","paddingLeft","border","components_FactorInfoOverlay","heatmap","td","Fragment","rows","_ret","maxmin","toConsumableArray","_loop","func","v","IndirectPage","handleSelectMenu","n","newArray","namePair","defaultValue","components_Matrix","settings","DirectPage","CentralityTable","eigRows","Tooltip","eigs","toFixed","colSpan","eigenvalue","CentralityPage","components_CentralityTable","UnderConstructionPage","pagename","HomePage","InfluenceTable","influenceTds","dependenceTds","Table","striped","bordered","hover","Chart","render","colors","scatters","_this","Scatter","line","stroke","strokeWidth","entry","component_Cell","fill","LabelList","dataKey","position","ScatterChart","width","height","display","flexDirection","alignItems","margin","CartesianGrid","Legend","content","fontSize","XAxis","ticks","Label","offset","YAxis","label","angle","component_Tooltip","animationEasing","React","Component","Utils","InfluencePage","_useState","useState","_useState2","chartOption","setChartOption","PFMS","normalize","components_InfluenceTable","Form","Select","aria-label","opt","components_Chart","SampleTable","marginTop","SettingsPage","toggles","heatmaps","ToggleButton","variant","onClick","btn","heatMapName","setSettings","handleClick","ToggleButtonGroup","AllPage","EditableMatrix","COL_HEAD_STYLE","borderLeft","ROW_HEAD_STYLE","borderTop","EditableMatrix_Cell","newData","isNaN","setMatrix","setEdited","handleChange","EditMatrixPage","isEdited","_useState3","_useState4","_useState5","_useState6","toggleStates","setToggleStates","_useState7","_useState8","isBatch","setBatch","handleSave","altered","indirectAltered","setDirectMatrix","checked","event","states","removalResult","handleRemoveAll","switchButtons","undoPopover","revertPopover","Button","disabled","ButtonGroup","components_EditableMatrix","Node","borderRadius","backgroundColor","padding","fontFamily","Loop","ICON_STYLE","signum","vertices","vertex","nameMap","strength","algorithmMap","genClsAvgEdgeWeight","genClsTotalEdgeWeight","genClsAvgEdgeWeightProdPageRank","genClsAvgEdgeWeightProdEigen","genClsAvgVertexEigen","FeedbackLoopsPage","LINK_STYLE","cursor","open","setOpen","loopSelection","setLoopSelection","factorNameMap","handleLengthSelection","handleWeightSelection","weight","handleCountSelection","handleFactorSelection","handleAlgorithmSelection","algorithm","setAnalyzing","setLoopsAnalyzing","lengths","loopComps","description","algorithms","loopCounts","loopWeights","loopsArray","reinforcing","both","balancing","components_Loop","infoLoopLength","trigger","infoEstimate","Container","size","aria-controls","aria-expanded","Collapse","in","complexity","icon","toLocaleString","minimumFractionDigits","displayEstTimeComplexity","shortFactorNames","payload","maxLoopLength","algorithmName","maxLoopCount","requestLoops","handleAnalyze","Spinner","animation","role","aria-hidden","Row","Col","sm","marginRight","marginLeft","App","doFileDownload","useRef","doFileUpload","initialProject","useEffect","axios","then","catch","err","wakeUpHeroku","isLoaded","fileDownloadUrl","setFileDownloadUrl","_useState9","_useState10","nav","post","fetchData","current","click","URL","revokeObjectURL","_callee4","_context4","_callee3","extension","_context3","download","href","ref","Navbar","collapseOnSelect","bg","expand","sticky","Brand","Toggle","Nav","justify","activeKey","onSelect","selectedKey","dist","title","NavDropdown","Item","eventKey","output","stringify","minifyProject","blob","Blob","createObjectURL","Link","location","pages_HomePage","pages_InputFilePage","pages_DirectPage","pages_IndirectPage","pages_EditMatrixPage","pages_CentralityPage","pages_InfluencePage","pages_AllPage","FeedbacksLoopPage","ConstructionPage","pages_SettingsPage","renderOnNavSelected","ReactDOM","components_App","tc","enumValue","freeze","toString","LIGHT","DARK","getData","temp","calculateColor","red","green","blue","difference","percent","r","g","calculateTextColor","heatMapNoColor","h","s","l","heatMapBlues","norm","hsl","heatMapReds","range","scale","heatMapGreens","_Users_charles_Documents_UWT_TCSS_498_PFMS_PFMS_APP_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fromRatio","isLight","toHexString","lighten"],"mappings":"oqBAQMA,EAASC,EAAQ,IAAWD,OAErBE,EAAY,EAmBlB,SAASC,EAAUC,GAEtB,IADA,IAAIC,EAAW,GACPC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAAK,CAErC,IADA,IAAIE,EAAa,GACTC,EAAI,EAAGA,EAAIL,EAAS,GAAGG,OAAQE,IACnCD,EAAWE,KAAK,CACZC,KAAMC,SAASR,EAASE,GAAGG,IAC3BI,EAAGP,EACHQ,EAAGL,IAGXJ,EAASK,KAAKF,GAElB,OAAOH,EAGJ,SAASU,EAASC,GAErB,IADA,IAAIC,EAAS,GACLX,EAAI,EAAGA,EAAIU,EAAWT,OAAQD,IAAK,CAEvC,IADA,IAAIE,EAAa,GACTC,EAAI,EAAGA,EAAIO,EAAW,GAAGT,OAAQE,IACrCD,EAAWC,GAAKO,EAAWV,GAAGG,GAElCQ,EAAOP,KAAKF,GAEhB,OAAOS,EAGJ,SAASC,EAAyBC,GAErC,IADA,IAAIF,EAAS,GACLX,EAAI,EAAGA,EAAIa,EAAiBZ,OAAQD,IAAK,CAE7C,IADA,IAAIE,EAAa,GACTC,EAAI,EAAGA,EAAIU,EAAiB,GAAGZ,OAAQE,IAC3CD,EAAWC,GAAMU,EAAiBb,GAAGG,GAAK,EAAI,EAAIU,EAAiBb,GAAGG,GAAK,GAAK,EAAI,EAExFQ,EAAOP,KAAKF,GAEhB,OAAOS,EAkBJ,SAASG,EAAQhB,GAEpB,IADA,IAAIC,EAAW,GACPC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IAAK,CAErC,IADA,IAAIE,EAAa,GACTC,EAAI,EAAGA,EAAIL,EAAS,GAAGG,OAAQE,IACnCD,EAAWE,KAAKE,SAASR,EAASE,GAAGG,GAAGE,OAE5CN,EAASK,KAAKF,GAElB,OAAOH,EAgCJ,SAASgB,EAAkBC,EAAYC,EAAQC,EAAQC,GAG1D,IADA,IAAIpB,EAAW,GACPC,EAAI,EAAGA,EAAIgB,EAAWf,OAAQD,IAAK,CACvC,IAAIoB,EAAO,GACXA,EAAMhB,KAAK,CACPiB,KAAML,EAAWhB,GACjBsB,IAAKL,EAAOM,IAAIP,EAAWhB,IAC3BwB,IAAKN,EAAOK,IAAIP,EAAWhB,IAC3ByB,MAAON,IAEXpB,EAASK,KAAKgB,GAElB,OAAOrB,EAyCJ,SAAS2B,EAAuBV,EAAYC,EAAQC,EAAQS,EAAWC,GAE1E,IADA,IAAI7B,EAAW,GACPC,EAAI,EAAGA,EAAIgB,EAAWf,OAAQD,IAAK,CACvC,IAAIoB,EAAO,GACXA,EAAMhB,KAAK,CACPiB,KAAML,EAAWhB,GACjBsB,IAAKL,EAAOM,IAAIP,EAAWhB,IAC3BwB,IAAKN,EAAOK,IAAIP,EAAWhB,IAC3ByB,MAAO/B,EAAOmC,UAElBT,EAAMhB,KAAK,CACPiB,KAAM,GACNC,IAAKK,EAAUJ,IAAIP,EAAWhB,IAC9BwB,IAAKI,EAAUL,IAAIP,EAAWhB,IAC9ByB,MAAO/B,EAAOoC,YAElB/B,EAASK,KAAKgB,GAElB,OAAOrB,EAoCJ,SAASgC,EAAQC,EAAUhB,EAAYlB,GAC1C,IAAImC,EAAQD,EAASE,QACrBD,EAAMhC,OAAUgC,EAAMhC,OAASL,EAAaA,EAAYqC,EAAMhC,OAM9D,IALA,IAAIkC,EAAQ,GACRC,EAAU,GACVC,EAAQ,GAGJrC,EAAI,EAAGA,EAAIiC,EAAMhC,OAAQD,IAC7BiC,EAAMjC,GAAGsC,KAAKC,QAAQ,SAACC,GACfL,EAAMM,SAASD,IACfL,EAAM/B,KAAKoC,KAMvB,IAAI,IAAIxC,EAAI,EAAGA,EAAImC,EAAMlC,OAAQD,IAC7BoC,EAAQhC,KAAK,CACTsC,GAAIP,EAAMnC,GACVqB,KAAMc,EAAMnC,GACZ2C,MAAO,IASf,IAHA,IAAIC,EAAM,EACNC,EAAM,EAEF7C,EAAI,EAAGA,GAAKiC,EAAMhC,OAAO,EAAGD,IAEhC,IADA,IAAIsC,EAAOL,EAAMjC,GAAGsC,KACZnC,EAAI,EAAGA,EAAImC,EAAKrC,OAAQE,IAAK,CACjC,IAAM2C,GAAQ3C,EAAI,GAAGmC,EAAKrC,OACpB8C,EAAQT,EAAKnC,GACb6C,EAAMV,EAAKQ,GACXH,EAAQ7C,EAASkB,EAAWiC,QAAQF,IAAQ/B,EAAWiC,QAAQD,IAC/DvB,EAASkB,EAAQ,EAAKjD,EAAOwD,IAAMxD,EAAOyD,KAC5CC,KAAKC,IAAIV,GAASC,IAAKA,EAAMD,GAC7BS,KAAKC,IAAIV,GAASE,IAAKA,EAAMF,GACpB,IAAVA,GACCN,EAAMjC,KAAK,CACPkD,OAAQhB,EAAKnC,GACboD,OAAQjB,EAAKQ,GACbH,MAAOA,EACPlB,MAAOA,EACP+B,KAAMb,IAQtB,OADAN,EAAME,QAAQ,SAACC,GAAD,OAAaA,EAAQG,OAAUS,KAAKC,IAAIb,EAAQG,OAAOE,IAAgB,KAATD,EAAIC,IAAc,IACvF,CACHV,MAAOC,EACPC,MAAOA,GAIR,SAASoB,EAAkBzB,EAAU0B,GACxC,IAAIzB,EAAQD,EAASE,QACrBD,EAAMhC,OAAUgC,EAAMhC,OAASL,EAAaA,EAAYqC,EAAMhC,OAK9D,IAJA,IAAIkC,EAAQ,IAAIwB,IACZtB,EAAQ,IAAIsB,IAEZrB,EAAOL,EAAMyB,GAAUpB,KACnBtC,EAAI,EAAGA,EAAIsC,EAAKrC,OAAQD,IAAK,CACjC,IAAM8C,GAAQ9C,EAAI,GAAGsC,EAAKrC,OACpB8C,EAAQT,EAAKtC,GACbgD,EAAMV,EAAKQ,GACjBX,EAAMyB,IAAIb,GACVV,EAAMuB,IAAIb,EAAMC,GAGpB,MAAO,CACHb,MAAOA,EACPE,MAAOA,GAoBR,SAASwB,EAAcC,EAAYC,EAAWC,GAGjD,IAFA,IACIjE,EAAW,EACPC,GAFK+D,EAAYD,EAAaA,EAAaC,GAEhC,EAAG/D,GAAK,EAAGA,IAC1BD,IAAc+D,EAAW9D,GAAGgE,EAEhC,OAAO1D,SAASP,GAYb,SAASkE,EAAajC,GACzB,IAAIkC,EAAO,IAAIC,IAWf,OAVAnC,EAASO,QAAQ,SAACC,GACdA,EAAQF,KAAKC,QAAQ,SAAC6B,GACdF,EAAKG,IAAID,GACTF,EAAKI,IAAIF,EAAQF,EAAK3C,IAAI6C,GAAU,GAEpCF,EAAKI,IAAIF,EAAQ,OAIZ,IAAID,IAAII,OAAAC,EAAA,EAAAD,CAAIL,EAAKO,WAAWC,KAAK,SAACC,EAAEC,GAAH,OAASA,EAAE,GAAKD,EAAE,MAIjE,SAASE,EAA6BC,GAAW,IAAAC,EAC9CC,EAASF,EAAU7E,OAGzB,OAFkB8E,EAAA,IAAGE,OAAHC,MAAAH,EAAAR,OAAAC,EAAA,EAAAD,CAAaO,IAAWK,OAAO,SAAAC,GAAC,OAAU,IAANA,IAASnF,QAEzC+E,EAASA,EAAUA,2RC7W+BrF,EAAQ,KAA9Ec,aAAUG,6BAA0BiE,iCAI7BQ,EAAgB,CACzBC,iBAAaC,EACbC,eAAgB,IAChBC,iBAAaF,EACbG,kBAAcH,EACdI,oBAAgBJ,EAGhBK,MAAO,CACHC,yBAAqBN,EACrBO,yBAAqBP,GAIzBQ,OAAO,CACHC,YAAQT,EACRU,eAAWV,EACXW,gBAAYX,EACZY,iBAAaZ,EACba,aAASb,GAEbc,SAAS,CACLL,YAAQT,EACRU,eAAWV,EACXW,gBAAYX,EACZY,iBAAaZ,EACbe,eAAWf,GAEfgB,cAAc,CACVC,QAAQ,CACJC,gBAAYlB,EACZnB,YAAQmB,EACRmB,qBAAiBnB,EACjBoB,eAAWpB,EACXqB,gBAAYrB,EACZsB,iBAAatB,EACbuB,iBAAavB,GAEjBwB,WAAY,KAYb,SAASC,EAAmBC,GAK/B,IAAMC,EAAYD,EAAQxB,YAAY0B,IAAI,SAAAC,GAAO,OAAIA,EAAQC,iBAEvDvC,EAAYlE,EAAyBqG,EAAQlB,OAAOC,QAIpDsB,EAAkBrB,oBAAUgB,EAAQlB,OAAOC,OAAQkB,GACnDK,EAAmBrB,qBAAWe,EAAQlB,OAAOC,OAAQkB,GACrDM,EAAoBC,qCAA2BR,EAAQlB,OAAOC,QAE9D0B,EAAeC,EAAaV,EAAQxB,YAAa6B,EAAiBC,EAAkBC,GAEpFnB,EAAWuB,kBAAQX,EAAQlB,OAAOC,OAAQiB,EAAQZ,SAASC,WAE3DuB,EAAoB5B,oBAAUI,EAAUa,GACxCY,EAAqB5B,qBAAWG,EAAUa,GAC1Ca,EAAsBN,qCAA2BpB,GAEjD2B,EAAiBL,EAAaV,EAAQxB,YAAaoC,EAAmBC,EAAoBC,GAEhG,MAAO,CACHzC,YAAa2B,EAAQ3B,YACrBG,YAAawB,EAAQxB,YACrBC,aAAcjF,EAASwG,EAAQlB,OAAOC,QACtCL,eAAgBsB,EAAQtB,eAExBC,MAAO,CACHC,oBAAqBf,EACrBgB,oBAAqBjB,EAA6BC,IAEtDiB,OAAO,CACHC,OAAQiB,EAAQlB,OAAOC,OACvBC,UAAWqB,EACXpB,WAAYqB,EACZpB,YAAaqB,EACbpB,QAASsB,GAEbrB,SAAS,CACLL,OAAQK,EACRJ,UAAW4B,EACX3B,WAAY4B,EACZ3B,YAAa4B,EACb3B,QAAS4B,EACT1B,UAAWW,EAAQZ,SAASC,WAEhCC,cAAc,CACVC,QAAQ,CACJC,WAAYQ,EAAQV,cAAcC,QAAQC,WAC1CrC,OAAQ6C,EAAQV,cAAcC,QAAQpC,OACtCsC,gBAAiBO,EAAQV,cAAcC,QAAQE,gBAC/CC,UAAWM,EAAQV,cAAcC,QAAQG,UACzCE,aAAa,EACbD,WAAYK,EAAQV,cAAcC,QAAQI,WAC1CE,YAAaG,EAAQV,cAAcC,QAAQM,aAE/CC,WAAYE,EAAQV,cAAcQ,aAMvC,SAASkB,EAAmBC,GAI/B,IAAMC,EAAaC,KAAKC,MAAMC,oBAAUJ,IAUpCK,EAAc,SAACC,GAEf,IADAA,EAAWA,EAASC,QACPxI,OAAS,EAElB,OAAOuI,EAASE,cAGpB,IAAIC,EAAsBC,MAAMC,UAAU1D,OAAO2D,KAAKN,EAAU,SAAAO,GAAC,MAb7B,MAa8CA,GAdtE,SAACC,GAAD,OAAUA,EAAKC,gBAAkBD,EAAKN,cAcsCQ,CAAQH,KACvFI,KAAK,IACLC,MAAM,KACNjE,OAAO,SAAAkE,GAAI,MAAa,KAATA,GAAeA,EAAKpJ,OAAS,IAErD,OAAmC,IAA/B0I,EAAoB1I,OACb0I,EAAoB,GAAGW,UAAU,EAAG,GAAGZ,cACP,IAA/BC,EAAoB1I,OACrB0I,EAAoB,GAAGW,UAAU,EAAG,GAAGZ,cACtCC,EAAoB,GAAGW,UAAU,EAAG,GAAGZ,cAExCC,EAAoB,GAAGW,UAAU,EAAG,GAAGZ,cACtCC,EAAoB,GAAGW,UAAU,EAAG,GAAGZ,cACvCC,EAAoB,GAAGW,UAAU,EAAG,GAAGZ,eAIjDa,EAAoB,SAACC,GACvB,IAAIC,EAAY,IAAItF,IAQpB,OANAqF,EAAkBrC,IAAI,SAAA9F,GAClBoI,EAAUpF,IAAIhD,EAAKqI,iBACfD,EAAUnF,IAAIjD,EAAKqI,gBAAiBD,EAAUlI,IAAIF,EAAKqI,iBAAmB,GAC1ED,EAAUnF,IAAIjD,EAAKqI,gBAAiB,KAGrCD,GAkBX,IAAMhE,EAAc0C,EAAWwB,QAAQxC,IAAI,SAAA/B,GAAC,OAAIA,EAAEkE,UAAU,EAAG,GAAGZ,gBAC7CvB,IAAI,SAAC/B,EAAGpF,GAAO,MAvDzB,CAACqH,eADSuC,EAwDkCzB,EAAWwB,QAAQ3J,GAvDvC0J,gBAAkBnB,EAAYqB,IAD7C,IAACA,KA0CrB,SAA0BC,GACtB,IAAIJ,EAAYF,EAAkBM,GAClCjB,MAAMkB,KAAKL,GACNtE,OAAO,SAAAJ,GAAA,IAAAgF,EAAAxF,OAAAyF,EAAA,EAAAzF,CAAAQ,EAAA,UAAAgF,EAAA,GAAAA,EAAA,GAA0B,IACjC5C,IAAI,SAAA8C,GAAA,IAAAC,EAAA3F,OAAAyF,EAAA,EAAAzF,CAAA0F,EAAA,GAAE5I,EAAF6I,EAAA,UAAAA,EAAA,GAAmB7I,IACvBkB,QAAQ,SAAA4H,GACL,IAAIC,EAAQ,EACZP,EACK1E,OAAO,SAAAiC,GAAO,OAAIA,EAAQsC,kBAAoBS,IAC9C5H,QAAQ,SAAA6E,GAAO,OAAIA,EAAQsC,gBAAkBtC,EAAQsC,gBAAkBU,QAOxFC,CAAiB5E,GAEjB,IAAMX,EAAYlE,EAAyBuH,EAAWmC,OAChDpD,EAAYzB,EAAY0B,IAAI,SAAAC,GAAO,OAAIA,EAAQC,iBAC/CC,EAAkBrB,oBAAUkC,EAAWmC,MAAOpD,GAC9CK,EAAmBrB,qBAAWiC,EAAWmC,MAAOpD,GAChDM,EAAoBC,qCAA2BU,EAAWmC,OAE1D5C,EAAeC,EAAalC,EAAa6B,EAAiBC,EAAkBC,GAElF,MAAO,CACHlC,YAAa,UACbG,YAAaA,EACbC,aAAcjF,EAAS0H,EAAWmC,OAClC3E,eAAgBlF,EAAS0H,EAAWmC,OAEpC1E,MAAO,CACHC,oBAAqBf,EACrBgB,oBAAqBjB,EAA6BC,IAEtDiB,OAAO,CACHC,OAAQmC,EAAWmC,MACnBrE,UAAWqB,EACXpB,WAAYqB,EACZpB,YAAaqB,EACbpB,QAASsB,GAEbrB,SAAS,CACLL,OAAQmC,EAAWmC,MACnBrE,UAAWqB,EACXpB,WAAYqB,EACZpB,YAAaqB,EACbpB,QAASsB,EACTpB,UAAW,GAEfC,cAAc,CACVC,QAAQ,CACJC,WAAY,EACZrC,OAAQqB,EAAY,GAAGiE,gBACvBhD,gBAAiB,mBACjBC,UAAW,GACXE,aAAa,EACbD,WAAY,gBACZE,iBAAavB,GAEjBwB,WAAW,KAyNhB,SAASwD,EAAeC,GAC3B,OAAO,SAACC,GACJ,OAAOlG,OAAAmG,EAAA,EAAAnG,CAAA,GAAQkG,EAAf,CACYlE,cAAe,CACXC,QAAQ,CACJC,WAAYgE,EAAclE,cAAcC,QAAQC,WAChDrC,OAAQqG,EAAclE,cAAcC,QAAQpC,OAC5CsC,gBAAiB+D,EAAclE,cAAcC,QAAQE,gBACrDC,UAAW8D,EAAclE,cAAcC,QAAQG,UAC/CE,YAAa4D,EAAclE,cAAcC,QAAQK,YACjDD,WAAY6D,EAAclE,cAAcC,QAAQI,WAChDE,YAAa0D,GAEjBzD,WAAW0D,EAAclE,cAAcQ,eAwC/D,SAASY,EAAalC,EAAaQ,EAAWC,EAAYC,GACtD,IAAIwE,EAAalF,EAAY0B,IAAI,SAACyD,EAAKJ,GACnC,MAAO,CAAEnJ,KAAKuJ,EAAIlB,gBAAiBmB,MAAM1E,EAAY2E,mBAAmBN,MACzE9F,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEiG,MAAQlG,EAAEkG,QAC1BE,EAActF,EAAY0B,IAAI,SAACyD,EAAKJ,GACpC,MAAO,CAAEnJ,KAAKuJ,EAAIlB,gBAAiBmB,MAAM1E,EAAY6E,sBAAsBR,MAC5E9F,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEiG,MAAQlG,EAAEkG,QAe9B,OAda,IAAI1G,IAAIsB,EAAY0B,IAAI,SAACyD,EAAKJ,GACvC,IAIMS,EAAO,CACThF,UALgB2C,MAAMkB,KAAK7D,EAAUiF,QAAQjI,QAAQ2H,EAAIvD,gBAAkB,EAM3EnB,WALiB0C,MAAMkB,KAAK5D,EAAWgF,QAAQjI,QAAQ2H,EAAIvD,gBAAkB,EAM7E8D,WALiBJ,EAAYK,UAAU,SAAA5I,GAAO,OAAIA,EAAQnB,OAASuJ,EAAIlB,kBAAmB,EAM1F2B,UALgBV,EAAWS,UAAU,SAAA5I,GAAO,OAAIA,EAAQnB,OAASuJ,EAAIlB,kBAAmB,GAQ5F,MAAO,CAACkB,EAAIlB,gBAAiBuB,MCzdtBK,MApCf,SAAwBC,GAQpB,IAAIC,EAAQ,eAAAzG,EAAAR,OAAAkH,EAAA,EAAAlH,CAAAmH,EAAA/G,EAAAgH,KAAG,SAAAC,EAAOxG,GAAP,IAAAyG,EAAA,OAAAH,EAAA/G,EAAAmH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAjJ,MAAA,OAEXmJ,QAAQC,IAAI9G,GACZA,EAAE+G,kBACIN,EAAS,IAAIO,YACZC,OAAP,eAAAtC,EAAAxF,OAAAkH,EAAA,EAAAlH,CAAAmH,EAAA/G,EAAAgH,KAAgB,SAAAW,EAAOlH,GAAP,IAAA/D,EAAA,OAAAqK,EAAA/G,EAAAmH,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAzJ,MAAA,OAKC,SAHbzB,EAAOmL,SAASC,eAAe,cAAcC,MAAMC,KAAK,GAAGtL,KAAK+H,MAAM,MACrD/H,EAAKpB,OAAS,KAG/BsL,EAAMqB,WAAW3E,EAAmB7C,EAAE7B,OAAO5C,SAC7C4K,EAAMsB,WAAU,GAChBtB,EAAMuB,UARM,wBAAAP,EAAAQ,SAAAT,MAAhB,gBAAAU,GAAA,OAAAjD,EAAA7E,MAAA+H,KAAAC,YAAA,GAYJrB,EAAOsB,WAAW/H,EAAE7B,OAAOmJ,MAAM,IAjBlB,wBAAAX,EAAAgB,SAAAnB,MAAH,gBAAAwB,GAAA,OAAArI,EAAAG,MAAA+H,KAAAC,YAAA,GAqBZ,OACAG,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,aACXF,EAAA1I,EAAA2I,cAAA,0BACAD,EAAA1I,EAAA2I,cAAA,SAAOE,KAAK,OAAO9K,GAAG,aAAa+K,SAAY,SAACrI,GAAD,OAAOoG,EAASpG,IAAIsI,OAAO,2CCjBnEC,MA1Bf,SAA2BpC,GAEvB,OAAQ8B,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAWtC,EAAMsC,UACjBC,IAAG,SAAA7I,OAAWsG,EAAMsC,UAAjB,KAAA5I,OAA8BsG,EAAM7B,iBACvCqE,QACAV,EAAA1I,EAAA2I,cAACU,EAAA,EAAD,CAAStL,GAAG,gBAAgBoL,IAAG,SAAA7I,OAAWsG,EAAMsC,UAAjB,KAAA5I,OAA8BsG,EAAM7B,kBAC/D2D,EAAA1I,EAAA2I,cAACU,EAAA,EAAQC,OAAT,CAAgBC,GAAG,KAAKX,UAAS,MAAAtI,OAAQsG,EAAM4C,WAAd,eAAuCL,IAAG,YAAA7I,OAAcsG,EAAMsC,UAApB,KAAA5I,OAAiCsG,EAAM7B,kBAC9G2D,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,eAAea,MAAO,CAACC,aAAa,SAAU9C,EAAMlE,gBAErEgG,EAAA1I,EAAA2I,cAACU,EAAA,EAAQM,KAAT,CAAcf,UAAS,QAAAtI,OAAUsG,EAAM4C,YAAcL,IAAG,YAAA7I,OAAcsG,EAAMsC,UAApB,KAAA5I,OAAiCsG,EAAM7B,kBAC3F2D,EAAA1I,EAAA2I,cAAA,UAAK/B,EAAMlE,eAAX,KAA6BkE,EAAM7B,gBAAnC,KACA2D,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,4BAA4Ba,MAAO,CAACC,aAAa,UAHlE,sBAGgG9C,EAAMN,KAAKE,WAH3G,WAG+HI,EAAMgD,YACjIlB,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,oCAAoCa,MAAO,CAACC,aAAa,UAL1E,qBAKuG9C,EAAMN,KAAKI,UALlH,WAKqIE,EAAMgD,YACvIlB,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,wBAAwBa,MAAO,CAACC,aAAa,UAP9D,mBAOyF9C,EAAMN,KAAKhF,UAPpG,WAOuHsF,EAAMgD,YACzHlB,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,4BAA4Ba,MAAO,CAACC,aAAa,UATlE,oBAS8F9C,EAAMN,KAAK/E,WATzG,YAS8HqF,EAAMgD,eAGvIhD,EAAM/I,YCV6C7C,EAAQ,IAArE6O,sBAAmBC,eAAYC,gBAAaC,kBAEnD,SAASC,EAAKrD,GAEV,IAEMsD,EAAQ,CACVC,WAHKvD,EAAMlL,MAAQ,EAAIqO,EAAYnD,EAAM9J,OAAS+M,EAAkBjD,EAAM9J,OAI1EA,MAAOiN,EAAYC,EAAcpD,EAAM9J,SAe3C,OAAO8J,EAAMwD,OACD1B,EAAA1I,EAAA2I,cAAA,MAAIc,MAPG,CACfU,WAAY,QACZrN,MAAO,SAMK8L,UAAU,QACVO,IAAK,MAAQvC,EAAMxI,MAAM2G,gBAAkB,IAAM6B,EAAMvI,IAAI0G,iBACtDtG,KAAKC,IAAIkI,EAAMlL,OAGxBgN,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAWtC,EAAMyD,MAAQ,SAAW,MACpClB,IAAG,YAAA7I,OAAcsG,EAAMxI,MAAM2G,gBAA1B,OAAAzE,OAA+CsG,EAAMvI,IAAI0G,iBAC5DqE,QACIV,EAAA1I,EAAA2I,cAACU,EAAA,EAAD,CAAStL,GAAG,iBACR2K,EAAA1I,EAAA2I,cAACU,EAAA,EAAQC,OAAT,CAAgBG,MAAQS,EAAOX,GAAG,MAAlC,GAAAjJ,OAA2CsG,EAAMxI,MAAM2G,gBAAvD,YAAAzE,OAA4EsG,EAAMvI,IAAI0G,kBACtF2D,EAAA1I,EAAA2I,cAACU,EAAA,EAAQM,KAAT,QAAArJ,OACQsG,EAAMxI,MAAM2G,gBADpB,MAAAzE,OACwCsG,EAAMxI,MAAMsE,gBAC5CgG,EAAA1I,EAAA2I,cAAA,WAFR,GAAArI,OAGQsG,EAAMvI,IAAI0G,gBAHlB,MAAAzE,OAGsCsG,EAAMvI,IAAIqE,gBACxCgG,EAAA1I,EAAA2I,cAAA,WACJD,EAAA1I,EAAA2I,cAAA,QAAMc,MAAO,CAACa,WAAY,SAA1B,WAAAhK,OAA+CsG,EAAMlL,UAIjEgN,EAAA1I,EAAA2I,cAAA,MAAIc,MAAQS,EACAtB,UAAU,QACVO,IAAK,MAAQvC,EAAMxI,MAAM2G,gBAAkB,IAAM6B,EAAMvI,IAAI0G,iBACtDtG,KAAKC,IAAIkI,EAAMlL,QA4FrC6O,MAvFf,SAAiB3D,GAEb,IAuBI4D,EAvBEC,EAAgB7D,EAAM5B,QAAQxC,IAAI,SAAA9G,GACpC,IAKMmC,EAAW6K,EAAA1I,EAAA2I,cAAA,MAAIc,MALE,CACnBiB,YAAa,MACbhB,aAAc,MACdiB,OAAO,mBAEiCxB,IAAG,aAAA7I,OAAe5E,EAAKqJ,kBAC9CrJ,EAAKqJ,iBAG1B,OAAQ2D,EAAA1I,EAAA2I,cAACiC,EAAD,CACI1B,UAAU,SACVM,WAAY5C,EAAMiE,QAAQrB,WAC1BzE,gBAAiBrJ,EAAKqJ,gBACtBrC,eAAgBhH,EAAKgH,eACrB4D,KAAMM,EAAMvF,OAAOI,QAAQ7E,IAAIlB,EAAKqJ,iBACpC6E,YAAahD,EAAM5B,QAAQ1J,OAC3BuC,QAASA,MAInBiN,EAA8B,IAAzBlE,EAAM5B,QAAQ1J,OAAeoN,EAAA1I,EAAA2I,cAAAD,EAAA1I,EAAA+K,SAAA,MAAQrC,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAI,qBAClD6B,EAAO,GAEb,GAAmC,IAA/BpE,EAAMvF,OAAOA,OAAO/F,OAuDpB,OAAOoN,EAAA1I,EAAA2I,cAAA,sBAvD2B,IAAAsC,EAAA,eAAA7K,EAC5B8K,EAASpB,GAAW1J,EAAA,IAAGE,OAAHC,MAAAH,EAAAR,OAAAuL,EAAA,EAAAvL,CAAagH,EAAMvF,OAAOA,SAAS,SAACZ,GAAD,OAAOhC,KAAKC,IAAI+B,KAC7E+J,EACI9B,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,cACJ2B,EACCL,GAEV,IAPkC,IAAAW,EAAA,SAO1B/P,GACJ,IAKMwC,EAAW6K,EAAA1I,EAAA2I,cAAA,MAAIc,MALE,CACnBiB,YAAa,MACbhB,aAAc,MACdiB,OAAO,mBAEiCxB,IAAG,YAAA7I,OAAcsG,EAAM5B,QAAQ3J,GAAG0J,kBACzD6B,EAAM5B,QAAQ3J,GAAG0J,iBAEtCiG,EAAKvP,KACDiN,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,UAAY9N,GACjBqN,EAAA1I,EAAA2I,cAACiC,EAAD,CACI1B,UAAU,QACVM,WAAY5C,EAAMiE,QAAQrB,WAC1BzE,gBAAiB6B,EAAM5B,QAAQ3J,GAAG0J,gBAClCrC,eAAgBkE,EAAM5B,QAAQ3J,GAAGqH,eACjC4D,KAAMM,EAAMvF,OAAOI,QAAQ7E,IAAIgK,EAAM5B,QAAQ3J,GAAG0J,iBAChD6E,YAAahD,EAAM5B,QAAQ1J,OAC3BuC,QAASA,IACZ+I,EAAMvF,OAAOA,OAAOhG,GAAGmH,IAAI,SAAC3E,EAASrC,GAAV,OAExBkN,EAAA1I,EAAA2I,cAACsB,EAAD,CACIvO,KAAMmC,EACNf,MAAO8J,EAAMiE,QAAQQ,KAAK5M,KAAKC,IAAIb,GAAUqN,EAAOhN,IAAKgN,EAAOjN,KAChEmM,OAAQ/O,IAAMG,EACd4C,MAASwI,EAAM5B,QAAQ3J,GACvBgD,IAAOuI,EAAM5B,QAAQxJ,GACrB6O,MAAShP,EAAI,EACb8N,IAAG,SAAA7I,OAAWjF,EAAX,OAAAiF,OAAkB9E,UA5BjCH,EAAI,EAAGA,EAAGuL,EAAM5B,QAAQ1J,OAAQD,IAAK+P,EAArC/P,GAmCR,OAAAiQ,EACI5C,EAAA1I,EAAA2I,cAAA,WACID,EAAA1I,EAAA2I,cAAA,SAAOC,UAAU,SACbF,EAAA1I,EAAA2I,cAAA,aACK6B,GAEL9B,EAAA1I,EAAA2I,cAAA,aACKqC,MAjDiB,2BAAAC,IAAAK,OAAA,GC5D3BC,MA5Bf,SAAsB3E,GAOlB,IALA,IAAM4E,EAAmB,SAAC/K,GJgTvB,IAAuCgL,EI/StC7E,EAAMqB,YJ+SgCwD,EI/SS9P,SAAS8E,EAAE7B,OAAOZ,OJgT9D,SAAC8H,GACJ,IAAM4F,EAAWzI,kBAAQ6C,EAAc1E,OAAOC,OAAQoK,GAChDlJ,EAAYuD,EAAchF,YAAY0B,IAAI,SAAAmJ,GAAQ,OAAIA,EAASjJ,iBAE/DQ,EAAoB5B,oBAAUoK,EAAUnJ,GACxCY,EAAqB5B,qBAAWmK,EAAUnJ,GAC1Ca,EAAsBN,qCAA2B4I,GAEjDrI,EAAiBL,EAAa8C,EAAchF,YAAaoC,EAAmBC,EAAoBC,GAEtG,OAAOxD,OAAAmG,EAAA,EAAAnG,CAAA,GAAKkG,EAAZ,CACIpE,SAAU,CACNL,OAAQqK,EACR/J,UAAW8J,EACXnK,UAAW4B,EACX3B,WAAY4B,EACZ3B,YAAa4B,EACb3B,QAAS4B,SI9TfxB,EAAU,GACRxG,EAAI,EAAGA,GAAI,EAAGA,IAClBwG,EAAQxG,GAAMqN,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAAO3C,EAAG8N,IAAK,UAAY9N,GAAIA,GAGzD,OAAQqN,EAAA1I,EAAA2I,cAAA,WACID,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,YACXF,EAAA1I,EAAA2I,cAAA,uCACAD,EAAA1I,EAAA2I,cAAA,UAAQ5K,GAAG,WAAWrB,KAAK,WAAWkP,aAAchF,EAAMtE,QAAQZ,SAASC,UAAWmH,SAAU,SAACrI,GAAD,OAAO+K,EAAiB/K,KACnHoB,IAGT6G,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAACkD,EAAD,CACIxK,OAAQuF,EAAMtE,QAAQZ,SACtBsD,QAAS4B,EAAMtE,QAAQxB,YACvB+J,QAASjE,EAAMkF,SAASjB,YCZ7BkB,MAZf,SAAoBnF,GAEhB,OAAQ8B,EAAA1I,EAAA2I,cAAA,WACID,EAAA1I,EAAA2I,cAACkD,EAAD,CACIxK,OAAQuF,EAAMtE,QAAQlB,OACtB4D,QAAS4B,EAAMtE,QAAQxB,YACvB+J,QAASjE,EAAMkF,SAASjB,qBC+D7BmB,MA/Df,SAAyBpF,GAErB,IAAIqF,EAAU,GACdA,EAAQxQ,KACJiN,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,cACLT,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAI,oBAAoBP,UAAU,SAAtC,WACAF,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAU,MACVC,IAAK,aACLC,QACIV,EAAA1I,EAAA2I,cAACuD,EAAA,EAAD,CAAS/C,IAAK,cAAd,+FAIJT,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,aAAcP,UAAU,SAAjC,qBAEJF,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAU,MACVC,IAAK,cACLC,QACIV,EAAA1I,EAAA2I,cAACuD,EAAA,EAAD,CAAS/C,IAAK,eAAd,+FAIJT,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,cAAeP,UAAU,SAAlC,wBAKZ,IAAI,IAAIvN,EAAI,EAAGA,EAAIuL,EAAM5B,QAAQ1J,OAAQD,IACrC4Q,EAAQxQ,KACJiN,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,MAAQ9N,GACTqN,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAU,OACVC,IAAK,kBAAoBvC,EAAM5B,QAAQ3J,GAAG0J,gBAC1CqE,QACIV,EAAA1I,EAAA2I,cAACuD,EAAA,EAAD,CAAS/C,IAAK,kBAAoBvC,EAAM5B,QAAQ3J,GAAG0J,iBAC9C6B,EAAM5B,QAAQ3J,GAAGqH,iBAG1BgG,EAAA1I,EAAA2I,cAAA,MAAIC,UAAU,QAAQO,IAAM,kBAAoBvC,EAAM5B,QAAQ3J,GAAG0J,iBAC5D6B,EAAM5B,QAAQ3J,GAAG0J,kBAG9B2D,EAAA1I,EAAA2I,cAAA,MAAIC,UAAU,QAAQO,IAAM,kBAAoBvC,EAAM5B,QAAQ3J,GAAG0J,iBAAkB6B,EAAMuF,KAAKhG,mBAAmB9K,GAAG+Q,QAAQ,IAC5H1D,EAAA1I,EAAA2I,cAAA,MAAIC,UAAU,QAAQO,IAAM,mBAAqBvC,EAAM5B,QAAQ3J,GAAG0J,iBAAkB6B,EAAMuF,KAAK9F,sBAAsBhL,GAAG+Q,QAAQ,MAK5I,OAAO1D,EAAA1I,EAAA2I,cAAA,SAAOC,UAAU,SACZF,EAAA1I,EAAA2I,cAAA,aACID,EAAA1I,EAAA2I,cAAA,UACID,EAAA1I,EAAA2I,cAAA,MAAKC,UAAU,QAAQyD,QAAQ,KAA/B,kCAAmEzF,EAAMuF,KAAKG,WAAWF,QAAQ,MAGzG1D,EAAA1I,EAAA2I,cAAA,aACKsD,KC7CNM,MAlBf,SAAwB3F,GAEpB,OAAQ8B,EAAA1I,EAAA2I,cAAA,WACID,EAAA1I,EAAA2I,cAAA,SAAOC,UAAU,YACbF,EAAA1I,EAAA2I,cAAA,aACID,EAAA1I,EAAA2I,cAAA,UACID,EAAA1I,EAAA2I,cAAA,UACID,EAAA1I,EAAA2I,cAAC6D,EAAD,CAAiBxH,QAAS4B,EAAMtE,QAAQxB,YAAaqL,KAAMvF,EAAMtE,QAAQlB,OAAOI,eAEpFkH,EAAA1I,EAAA2I,cAAA,UACID,EAAA1I,EAAA2I,cAAC6D,EAAD,CAAiBxH,QAAS4B,EAAMtE,QAAQxB,YAAaqL,KAAMvF,EAAMtE,QAAQZ,SAASF,oBCFnGiL,MAVf,SAA+B7F,GAE3B,OAAQ8B,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,aACXF,EAAA1I,EAAA2I,cAAA,gCACAD,EAAA1I,EAAA2I,cAAA,UAAK/B,EAAM8F,YCMZC,MAVf,SAAkB/F,GAEd,OAAQ8B,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,aACXF,EAAA1I,EAAA2I,cAAA,sCACAD,EAAA1I,EAAA2I,cAAA,4BAAmBD,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,4BAAhC,SAAiEF,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,4BAA9E,0CC6BDgE,MAxBf,SAAwBhG,GAEpB,IAAIiG,EAAe5I,MAAMkB,KAAKyB,EAAMjK,KAAK6F,IAAI,SAAApC,GAAA,IAAAgF,EAAAxF,OAAAyF,EAAA,EAAAzF,CAAAQ,EAAA,GAAE+I,EAAF/D,EAAA,GAAOpH,EAAPoH,EAAA,UACzCsD,EAAA1I,EAAA2I,cAAA,MAAIC,UAAU,QAAQO,IAAK,UAAYA,GAAvC,GAAA7I,OAAgD6I,EAAhD,OAAA7I,OAAyDtC,MAEzD8O,EAAgB7I,MAAMkB,KAAKyB,EAAM/J,KAAK2F,IAAI,SAAA8C,GAAA,IAAAC,EAAA3F,OAAAyF,EAAA,EAAAzF,CAAA0F,EAAA,GAAE6D,EAAF5D,EAAA,GAAOvH,EAAPuH,EAAA,UAC1CmD,EAAA1I,EAAA2I,cAAA,MAAIC,UAAU,QAAQO,IAAK,UAAYA,GAAvC,GAAA7I,OAAgD6I,EAAhD,OAAA7I,OAAyDtC,MAEzDgN,EAAO6B,EAAarK,IAAI,SAACsI,EAAIjF,GAAL,OAAgB6C,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,MAAQtD,GAAQiF,EAAIgC,EAAcjH,MAEvF,OAAO6C,EAAA1I,EAAA2I,cAACoE,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC5BxE,EAAA1I,EAAA2I,cAAA,aACID,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,cACLT,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,gBAAT,aACAT,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,iBAAT,gBAGRT,EAAA1I,EAAA2I,cAAA,aACKqC,wICnBbjQ,GAAUC,EAAQ,IAAsBD,OA2E7BoS,8MAxEXC,OAAQ,WAqCJ,IAlCA,IAAIC,EAAS,CACT,CACI3Q,KAAM,SACNI,MAAO/B,GAAOmC,SAElB,CACIR,KAAM,WACNI,MAAO/B,GAAOoC,YA0BlBmQ,EAAW,GACNjS,EAAI,EAAGA,EAAIkS,EAAK3G,MAAMlL,KAAKJ,OAAQD,IAC5CiS,EAAS7R,KACLiN,EAAA1I,EAAA2I,cAAC6E,GAAA,EAAD,CAAS9R,KAAM6R,EAAK3G,MAAMlL,KAAKL,GAAIoS,KAAM,CAACC,OAAQ,QAASC,YAAa,IACvEJ,EAAK3G,MAAMlL,KAAKL,GAAGmH,IAAK,SAACoL,EAAO/H,GACjC,OAAO6C,EAAA1I,EAAA2I,cAACkF,GAAA,EAAD,CAAMC,KAAMF,EAAM9Q,UAEzB4L,EAAA1I,EAAA2I,cAACoF,GAAA,EAAD,CAAWC,QAAQ,OAAOC,SAAS,SAASH,KAAO,YAGvD,OACIpF,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,SACXF,EAAA1I,EAAA2I,cAACuF,GAAA,EAAD,CAAcC,MAAO,IAAMC,OAAQ,IACjC3E,MAAS,CAAC4E,QAAS,OACjBC,cAAc,SACdC,WAAY,SACZC,OAAO,SACP9F,EAAA1I,EAAA2I,cAAC8F,GAAA,EAAD,MACA/F,EAAA1I,EAAA2I,cAAC+F,GAAA,EAAD,CAAQC,QAvCC,SAAC/H,GAClB,OACE8B,EAAA1I,EAAA2I,cAAA,UAEM0E,EAAO7K,IAAI,SAAC3E,GAAD,OACX6K,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAG,QAAA7I,OAAUzC,EAAQnB,MAAQ+M,MAAO,CAAC3M,MAAOe,EAAQf,MACxDqR,MAAO,QACPK,OAAQ,OACRI,SAAU,SACNlG,EAAA1I,EAAA2I,cAAA,QAAMc,MAAO,CAACmF,SAAU,SAAU/Q,EAAQnB,aA+B9CgM,EAAA1I,EAAA2I,cAACkG,GAAA,EAAD,CAAOhG,KAAK,SAASmF,QAAQ,MAAMtR,KAAK,aAAaoS,MAAO,CAAC,QACzDpG,EAAA1I,EAAA2I,cAACoG,GAAA,EAAD,CAAO/Q,MAAQ,aAAagR,OAAQ,EAAGf,SAAS,kBAEpDvF,EAAA1I,EAAA2I,cAACsG,GAAA,EAAD,CAAOpG,KAAK,SACRmF,QAAQ,MACRtR,KAAK,YACLwS,MAAO,CAAClR,MAAO,YAAamR,OAAQ,GAAIlB,SAAU,cAClDa,MAAO,CAAC,SAEZpG,EAAA1I,EAAA2I,cAACyG,GAAA,EAAD,CAASC,gBAAgB,aACxB/B,kCAlEDgC,IAAMC,qBCHtBxU,WAASC,EAAQ,IAAyBD,QAC1CyU,GAAQxU,EAAQ,KA4DLyU,OA1Df,SAAuB7I,GAAO,IAItBlL,EAJsBgU,EAEYC,mBAAS,GAFrBC,EAAAhQ,OAAAyF,EAAA,EAAAzF,CAAA8P,EAAA,GAEnBG,EAFmBD,EAAA,GAENE,EAFMF,EAAA,GAMtB5K,EAAU4B,EAAMtE,QAAQxB,YAAY0B,IAAI,SAAC/C,GAAD,OAAYA,EAAOiD,iBAyB/D,OAtBmB,IAAhBmN,EACCnU,EAAO8T,GAAMpT,kBAAkB4I,EAC3B+K,IAAKC,UAAUpJ,EAAMtE,QAAQlB,OAAOE,WACpCyO,IAAKC,UAAUpJ,EAAMtE,QAAQlB,OAAOG,YACpCxG,GAAOmC,SACY,IAAhB2S,EACPnU,EAAO8T,GAAMpT,kBAAkB4I,EAC3B+K,IAAKC,UAAUpJ,EAAMtE,QAAQZ,SAASJ,WACtCyO,IAAKC,UAAUpJ,EAAMtE,QAAQZ,SAASH,YACtCxG,GAAOoC,WACY,IAAhB0S,EACPnU,EAAO8T,GAAMzS,uBAAuBiI,EAChC+K,IAAKC,UAAUpJ,EAAMtE,QAAQlB,OAAOE,WACpCyO,IAAKC,UAAUpJ,EAAMtE,QAAQlB,OAAOG,YACpCwO,IAAKC,UAAUpJ,EAAMtE,QAAQZ,SAASJ,WACtCyO,IAAKC,UAAUpJ,EAAMtE,QAAQZ,SAASH,aAE1C+F,QAAQC,IAAI,gCAKRmB,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,aACXF,EAAA1I,EAAA2I,cAAA,SAAOC,UAAU,YACbF,EAAA1I,EAAA2I,cAAA,aACID,EAAA1I,EAAA2I,cAAA,UACID,EAAA1I,EAAA2I,cAAA,UACID,EAAA1I,EAAA2I,cAACsH,EAAD,CAAgBtT,IAAKiK,EAAMtE,QAAQlB,OAAOE,UAAWzE,IAAK+J,EAAMtE,QAAQlB,OAAOG,cAEnFmH,EAAA1I,EAAA2I,cAAA,UACID,EAAA1I,EAAA2I,cAACsH,EAAD,CAAgBtT,IAAKiK,EAAMtE,QAAQZ,SAASJ,UAAWzE,IAAK+J,EAAMtE,QAAQZ,SAASH,iBAKnGmH,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAACuH,GAAA,EAAKC,OAAN,CAAaC,aAAW,yBAAyBtH,SAAU,SAACuH,GACxDP,EAAenU,SAAS0U,EAAIzR,OAAOZ,UAEnC0K,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAAM,KAAd,UACA0K,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAAM,KAAd,YACA0K,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAAM,KAAd,SAEJ0K,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAC2H,GAAD,CAAO5U,KAAMA,sCC3DQV,EAAQ,IAAtC+O,kBAAaC,oBAsCpB,SAASuG,GAAY3J,GAGjB,IADA,IAAIoE,EAAO,GACF3P,EAAI,GAAIA,EAAI,EAAGA,GAAQ,GAAI,CAChC,IAAIyB,EAAQ8J,EAAMiE,QAAQQ,KAAKhQ,EAAG,EAAG,IACjCoO,EAAQ,CACRU,WAAYJ,GAAYjN,GACxBA,MAAOiN,GAAYC,GAAclN,IACjCqR,MAAO,OAEXnD,EAAKvP,KAAKiN,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAG,OAAA7I,OAASjF,GAAKoO,MAAOA,GAAQ7C,EAAMiE,QAAQnO,OAOhE,OAAOgM,EAAA1I,EAAA2I,cAAA,SAAOC,UAAU,QAAQa,MAJpB,CACR+G,UAAU,QAIV9H,EAAA1I,EAAA2I,cAAA,aACID,EAAA1I,EAAA2I,cAAA,UACKqC,KAMFyF,OA9Df,SAAsB7J,GAElB,IASM8J,EAAUC,YAASnO,IAAI,SAAA/B,GAAC,OAClBiI,EAAA1I,EAAA2I,cAACiI,GAAA,EAAD,CACIzH,IAAK1I,EAAE/D,KACPqB,GAAI0C,EAAE/D,KACNsB,MAAOyC,EAAE/D,KACTmU,QAAQ,kBACRC,QAAS,SAACC,GAAD,OAfL,SAACC,GACjB,IAAInG,EAAU8F,YAASnQ,OAAO,SAAA3C,GAAO,OAAIA,EAAQnB,OAASsU,IAAa,GACvEpK,EAAMqK,YAAY,SAAAnL,GACd,OAAOlG,OAAAmG,EAAA,EAAAnG,CAAA,GAAKkG,EAAZ,CACQ+E,QAAUA,MAWQqG,CAAYzQ,EAAE/D,QAE9B+D,EAAE/D,QAIpB,OAAQgM,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,aACXF,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,2CAA0C,IAC1CD,EAAA1I,EAAA2I,cAACwI,GAAA,EAAD,CAAmBtI,KAAK,QAAQnM,KAAK,UAAUkP,aAAchF,EAAMkF,SAASjB,QAAQnO,MAC/EgU,GAELhI,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAC4H,GAAD,CAAa1F,QAASjE,EAAMkF,SAASjB,YCZtCuG,OArBf,SAAiBxK,GAGb,OAAQ8B,EAAA1I,EAAA2I,cAAA,WACID,EAAA1I,EAAA2I,cAACsH,EAAD,CAAgBtT,IAAKiK,EAAMtE,QAAQlB,OAAOE,UAAWzE,IAAK+J,EAAMtE,QAAQlB,OAAOG,aAC/EmH,EAAA1I,EAAA2I,cAAC6D,EAAD,CAAiBxH,QAAS4B,EAAMtE,QAAQxB,YAAaqL,KAAMvF,EAAMtE,QAAQlB,OAAOI,cAChFkH,EAAA1I,EAAA2I,cAACkD,EAAD,CACIvJ,QAASsE,EAAMtE,QACfqD,MAAOiB,EAAMtE,QAAQlB,OAAOC,OAC5B2D,QAAS4B,EAAMtE,QAAQxB,YACvB+J,QAASjE,EAAMkF,SAASjB,UAC5BnC,EAAA1I,EAAA2I,cAACkD,EAAD,CACIvJ,QAASsE,EAAMtE,QACfqD,MAAOiB,EAAMtE,QAAQZ,SAASL,OAC9B2D,QAAS4B,EAAMtE,QAAQxB,YACvB+J,QAASjE,EAAMkF,SAASjB,eCPwB7P,EAAQ,IAArE6O,wBAAmBC,iBAAYC,kBAAaC,oBAEnD,SAASC,GAAKrD,GAEV,IAEMsD,EAAQ,CACVC,WAHKvD,EAAMlL,MAAQ,EAAIqO,GAAYnD,EAAM9J,OAAS+M,GAAkBjD,EAAM9J,OAI1EA,MAAOiN,GAAYC,GAAcpD,EAAM9J,SAU3C,GAAI8J,EAAMhL,IAAMgL,EAAM/K,EAClB,OAAQ6M,EAAA1I,EAAA2I,cAAA,MAAIc,MARG,CACfU,WAAY,QACZrN,MAAO,SAOK8L,UAAU,QACVO,IAAK,MAAQvC,EAAMhL,EAAI,IAAMgL,EAAM/K,GAC9B4C,KAAKC,IAAIkI,EAAMlL,OAKpC,IADA,IAAMmG,EAAU,GACRxG,GAAK,EAAGA,GAAK,EAAGA,IACpBwG,EAAQxG,EAAI,GAAMqN,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAAO3C,EAAG8N,IAAK,MAAOvC,EAAMhL,EAAI,IAAMgL,EAAM/K,EAAI,QAAUR,GAAIA,GAG5F,OAAOqN,EAAA1I,EAAA2I,cAAA,MAAIC,UAAU,QACTO,IAAK,MAAQvC,EAAMhL,EAAI,IAAMgL,EAAM/K,EACnC4N,MAAOS,GACPxB,EAAA1I,EAAA2I,cAAA,UAAQ5K,GAAG,WAAWrB,KAAK,WAAWkP,aAAchF,EAAMlL,KAAMoN,SAAUlC,EAAMkC,UAC1EjH,IAuHPwP,OAlHf,SAAyBzK,GAErB,IAyDI4D,EAzDE8G,EAAiB,CACnB5G,YAAa,MACbhB,aAAc,MACd6H,WAAW,kBAGTC,EAAiB,CACnB9G,YAAa,QACbhB,aAAc,QACd+H,UAAU,kBA8BRhH,EAAgB7D,EAAM5B,QAAQxC,IAAI,SAAA9G,GAAI,OACxCgN,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAU,MACVC,IAAK,MAAQzN,EAAKqJ,gBAClBqE,QACIV,EAAA1I,EAAA2I,cAACuD,EAAA,EAAD,CAAS/C,IAAK,MAAQzN,EAAKqJ,iBACtBrJ,EAAKgH,iBAGdgG,EAAA1I,EAAA2I,cAAA,MAAIc,MAAO6H,EAAgBnI,IAAM,MAAQzN,EAAKqJ,iBACzCrJ,EAAKqJ,oBAMZ+F,EAA8B,IAAzBlE,EAAM5B,QAAQ1J,OAAeoN,EAAA1I,EAAA2I,cAAAD,EAAA1I,EAAA+K,SAAA,MAAQrC,EAAA1I,EAAA2I,cAAA,WAC1CqC,EAAO,GAEb,GAA2B,IAAvBpE,EAAMjB,MAAMrK,OAkDZ,OAAOoN,EAAA1I,EAAA2I,cAAA,sBAlDmB,IAAAsC,EAAA,eAAA7K,EACpB8K,EAASpB,IAAW1J,EAAA,IAAGE,OAAHC,MAAAH,EAAAR,OAAAuL,EAAA,EAAAvL,CAAagH,EAAMjB,QAAQ,SAAClF,GAAD,OAAOhC,KAAKC,IAAI+B,KACrE+J,EACA9B,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,cACJ2B,EACCL,GAEN,IAP0B,IAAAW,EAAA,SAOlB/P,GACJ2P,EAAKvP,KACDiN,EAAA1I,EAAA2I,cAAA,MAAIQ,IAAK,UAAY9N,GACjBqN,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAU,OACVC,IAAK,UAAYvC,EAAM5B,QAAQ3J,GAAG0J,gBAClCqE,QACIV,EAAA1I,EAAA2I,cAACuD,EAAA,EAAD,CAAS/C,IAAK,UAAYvC,EAAM5B,QAAQ3J,GAAG0J,iBACtC6B,EAAM5B,QAAQ3J,GAAGqH,iBAG1BgG,EAAA1I,EAAA2I,cAAA,MAAIc,MAAO+H,EAAgBrI,IAAM,UAAWvC,EAAM5B,QAAQ3J,GAAG0J,iBACxD6B,EAAM5B,QAAQ3J,GAAG0J,kBAItB6B,EAAMjB,MAAMtK,GAAGmH,IAAI,SAAC3E,EAASrC,GAAV,OACXkN,EAAA1I,EAAA2I,cAAC+I,GAAD,CACIhW,KAAMmC,EACNf,MAAO8J,EAAMiE,QAAQpM,KAAKC,IAAIb,GAAUqN,EAAOhN,IAAKgN,EAAOjN,KAC3DrC,EAAKP,EACLQ,EAAKL,EACL2N,IAAK,QAAU9N,EAAI,IAAMG,EACzBsN,SAAa,SAACrI,GAAD,OA9D7C,SAAsBA,EAAEpF,EAAEG,GACtB,IAAMmW,EAAUlR,EAAE7B,OAAOZ,MACzB,IAAK4T,MAAMD,SAA0B/Q,IAAZ+Q,EAAzB,CAEA,IADA,IAAIjG,EAAW,GACPrQ,EAAI,EAAGA,EAAIuL,EAAMjB,MAAMrK,OAAQD,IACnCqQ,EAASrQ,GAAKuL,EAAMjB,MAAMtK,GAAGkC,MAAM,GAEvCmO,EAASrQ,GAAGG,GAAKG,SAASgW,GAC1B/K,EAAMiL,UAAUnG,GAChB9E,EAAMkL,WAAU,IAqDgCC,CAAatR,EAAGpF,EAAGG,WAvB3DH,EAAI,EAAGA,EAAGuL,EAAM5B,QAAQ1J,OAAQD,IAAK+P,EAArC/P,GA8BR,OAAAiQ,EACI5C,EAAA1I,EAAA2I,cAAA,WACID,EAAA1I,EAAA2I,cAAA,SAAOC,UAAU,SACbF,EAAA1I,EAAA2I,cAAA,aACK6B,GAEL9B,EAAA1I,EAAA2I,cAAA,aACKqC,MA5CS,2BAAAC,IAAAK,OAAA,uBCxG5BxP,GAAgBd,EAAQ,KAAxBc,SAyJSkW,OAvJf,SAAwBpL,GAAO,IAAA8I,EAGGC,oBAAS,GAHZC,EAAAhQ,OAAAyF,EAAA,EAAAzF,CAAA8P,EAAA,GAGpBuC,EAHoBrC,EAAA,GAGVkC,EAHUlC,EAAA,GAAAsC,EAICvC,mBAAS/I,EAAMtE,QAAQvB,cAJxBoR,EAAAvS,OAAAyF,EAAA,EAAAzF,CAAAsS,EAAA,GAIpB7Q,EAJoB8Q,EAAA,GAIZN,EAJYM,EAAA,GAAAC,EAKazC,mBAAS,EAAC,GAAO,GAAO,IALrC0C,EAAAzS,OAAAyF,EAAA,EAAAzF,CAAAwS,EAAA,GAKpBE,EALoBD,EAAA,GAKNE,EALMF,EAAA,GAAAG,EAMC7C,oBAAS,GANV8C,EAAA7S,OAAAyF,EAAA,EAAAzF,CAAA4S,EAAA,GAMpBE,EANoBD,EAAA,GAMXE,EANWF,EAAA,GAQrBG,EAAa,WAEfhM,EAAMqB,WhBsPP,SAAyB5G,GAC5B,OAAO,SAACyE,GAEJ,IAAMvD,EAAYuD,EAAchF,YAAY0B,IAAI,SAAAmJ,GAAQ,OAAIA,EAASjJ,iBAC/DmQ,EAAUxR,EACVyR,EAAkB7P,kBAAQ4P,EAAS/M,EAAcpE,SAASC,WAC1DxB,EAAYlE,EAAyB4W,GAErClQ,EAAkBrB,oBAAUuR,EAAStQ,GACrCK,EAAmBrB,qBAAWsR,EAAStQ,GACvCM,EAAoBC,qCAA2B+P,GAE/C9P,EAAeC,EAAa8C,EAAchF,YAAa6B,EAAiBC,EAAkBC,GAE1FK,EAAoB5B,oBAAUwR,EAAiBvQ,GAC/CY,EAAqB5B,qBAAWuR,EAAiBvQ,GACjDa,EAAsBN,qCAA2BgQ,GAEjDzP,EAAiBL,EAAa8C,EAAchF,YAAaoC,EAAmBC,EAAoBC,GAEtG,OAAOxD,OAAAmG,EAAA,EAAAnG,CAAA,GAAKkG,EAAZ,CACI/E,aAAcjF,EAAS+W,GACvB5R,MAAO,CACHC,oBAAsBf,EACtBgB,oBAAqBjB,EAA6BC,IAEtDiB,OAAQ,CACJC,OAAQwR,EACRvR,UAAWqB,EACXpB,WAAYqB,EACZpB,YAAaqB,EACbpB,QAASsB,GAEbrB,SAAU,CACNL,OAAQyR,EACRnR,UAAWmE,EAAcpE,SAASC,UAClCL,UAAW4B,EACX3B,WAAY4B,EACZ3B,YAAa4B,EACb3B,QAAS4B,MgB7RA0P,CAAgB1R,IACjCyQ,GAAU,IAiCRpB,EAAU,CAAC,EAAG,EAAG,GAAGlO,IAAI,SAAC/B,EAAGoF,GAAJ,OAC1B6C,EAAA1I,EAAA2I,cAACiI,GAAA,EAAD,CACI/H,KAAK,WACLmK,QAASV,EAAazM,GACtBsD,IAAK1I,EACL1C,GAAI0C,EACJzC,MAAOyC,EACPoQ,QAAQ,kBACR/H,SAAU,SAAAmK,GAAK,OAvBC,SAAClC,GACrB,IAAImC,EAAMtT,OAAAuL,EAAA,EAAAvL,CAAO0S,GACjBY,EAAOnC,EAAI/S,MAAQ,GAAK+S,EAAIiC,QAG5B,IADA,IAAIG,EAAgBrX,GAAS8K,EAAMtE,QAAQlB,OAAOC,QAC1ChG,EAAI,EAAGA,EAAI8X,EAAc7X,OAAQD,IACrC,IAAI,IAAIG,EAAI,EAAGA,EAAI2X,EAAc9X,GAAGC,OAAQE,IACxC2X,EAAc9X,GAAGG,GAAM0X,EAAOzU,KAAKC,IAAIyU,EAAc9X,GAAGG,IAAM,GAAM,EAAI2X,EAAc9X,GAAGG,GAGjGsW,GAAU,GACVD,EAAUsB,GACVZ,EAAgBW,GAWOE,CAAgBH,EAAMrU,UAEvC6B,KAIJ4S,EAAgB,CAAC,kBAAmB,cAAc7Q,IAAI,SAAA/B,GAAC,OACzDiI,EAAA1I,EAAA2I,cAACiI,GAAA,EAAD,CACIzH,IAAK1I,EACL1C,GAAI0C,EACJzC,MAAOyC,EACPoQ,QAAQ,kBACRC,QAAS,kBAAM6B,EAAe,eAANlS,KAEtBA,KAIJ6S,EACF5K,EAAA1I,EAAA2I,cAACU,EAAA,EAAD,CAAStL,GAAG,iBACV2K,EAAA1I,EAAA2I,cAACU,EAAA,EAAQC,OAAT,CAAgBC,GAAG,MAAnB,WACAb,EAAA1I,EAAA2I,cAACU,EAAA,EAAQM,KAAT,2HAOA4J,EACF7K,EAAA1I,EAAA2I,cAACU,EAAA,EAAD,CAAStL,GAAG,iBACV2K,EAAA1I,EAAA2I,cAACU,EAAA,EAAQC,OAAT,CAAgBC,GAAG,MAAnB,WACAb,EAAA1I,EAAA2I,cAACU,EAAA,EAAQM,KAAT,2HAQN,OAAQjB,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,aACXF,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,YACXF,EAAA1I,EAAA2I,cAAC6K,GAAA,EAAD,CAAQ3C,QAAQ,kBAAkBC,QAAS8B,EAAYa,UAAWxB,GAAlE,QAA0F,IAC1FvJ,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAU,SAEVE,QACIkK,GAEJ5K,EAAA1I,EAAA2I,cAAC6K,GAAA,EAAD,CAAQ3C,QAAQ,kBAAkBC,QAtF7B,WACrBgB,GAAU,GAEVD,EAAUjL,EAAMtE,QAAQlB,OAAOC,QAC/BkR,EAAgB,EAAC,GAAO,GAAO,KAkF8CkB,UAAWxB,GAAxE,wBAEH,IACDvJ,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CACIC,UAAU,SACVE,QACImK,GAEJ7K,EAAA1I,EAAA2I,cAAC6K,GAAA,EAAD,CAAQ3C,QAAQ,kBAAkBC,QAvFjC,WACjBgB,GAAU,GAEVD,EAAUjL,EAAMtE,QAAQtB,gBACxBuR,EAAgB,EAAC,GAAO,GAAO,IAC/BK,KAkFyEa,UAAWxB,GAApE,wBAGRvJ,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,YACXF,EAAA1I,EAAA2I,cAACwI,GAAA,EAAD,CAAmBtI,KAAK,QAAQnM,KAAK,UAAUkP,aAAc,mBACxDyH,IAGT3K,EAAA1I,EAAA2I,cAAA,WAEI+J,GACAhK,EAAA1I,EAAA2I,cAAA,yBACgB,IACZD,EAAA1I,EAAA2I,cAAC+K,GAAA,EAAD,CAAa7K,KAAK,WAAWnM,KAAK,WAC7BgU,GAELhI,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,YAIJ+J,EACIhK,EAAA1I,EAAA2I,cAACkD,EAAD,CACIvJ,QAASsE,EAAMtE,QACfqD,MAAOtE,EACP2D,QAAS4B,EAAMtE,QAAQxB,YACvB+J,QAASjE,EAAMkF,SAASjB,UAG5BnC,EAAA1I,EAAA2I,cAACgL,GAAD,CACIhO,MAAOtE,EACP2D,QAAS4B,EAAMtE,QAAQxB,YACvB+J,QAASjE,EAAMkF,SAASjB,QAAQQ,KAChCyG,UAAWA,EACXD,UAAWA,wDC9FrC,SAAS+B,GAAKhN,GASZ,OAAO8B,EAAA1I,EAAA2I,cAAA,QAAMc,MARG,CACZoK,aAAc,OACd/W,MAAO,QACPgX,gBAAiB,aACjBC,QAAS,OACTC,WAAY,aACZxF,OAAQ,QAEkB5H,EAAMlK,MAGvBuX,OA/DjB,SAAcrN,GAEZ,IAAMsN,EAAa,CACjBtF,SAAU,UACVtE,WAAW,QAGPzL,EAAO+H,EAAM/I,QAAQsW,OAAS,EACtBzL,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,+BAA+Ba,MAAOyK,IACnDxL,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,wBAAwBa,MAAOyK,IAEpDE,EAAWxN,EAAM/I,QAAQF,KAAK6E,IAAI,SAAC6R,EAAQxO,GAC7C,IAAMhI,EAAU6K,EAAA1I,EAAA2I,cAAA,YACED,EAAA1I,EAAA2I,cAACiL,GAAD,CAAMlX,KAAM2X,EAAQlL,IAAG,MAAA7I,OAAQsG,EAAMnB,MAAd,KAAAnF,OAAuB+T,MAEhE,OAAQ3L,EAAA1I,EAAA2I,cAAA,YAEAD,EAAA1I,EAAA2I,cAACiC,EAAD,CACgB1B,UAAU,SACVM,WAAW,UACXzE,gBAAiBsP,EACjB3R,eAAgBkE,EAAM0N,QAAQ1X,IAAIyX,GAClC/N,KAAMM,EAAMnF,QAAQ7E,IAAIyX,GACxBzK,YAAahD,EAAM0N,QAAQhZ,OAC3BuC,QAASA,IAEvBgI,EAAQe,EAAM/I,QAAQF,KAAKrC,OAAS,EAClCoN,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,0BAA0Ba,MAAO,CAACmF,SAAU,aACzDlG,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,2BAA2Ba,MAAO,CAACmF,SAAU,gBAYxE,OAAOlG,EAAA1I,EAAA2I,cAAA,WACKD,EAAA1I,EAAA2I,cAAA,aACID,EAAA1I,EAAA2I,cAAA,QAAMc,MATN,CACZoK,aAAc,OACdE,QAAS,OACTC,WAAY,aACZxF,OAAQ,QAKI,QAAAlO,OAA+BsG,EAAMnB,MAAQ,EAA7C,OAAqD5G,EAArD,MAAAyB,OAAiEsG,EAAM/I,QAAQ0W,SAASnI,QAAQ,KAChG1D,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,WACCyL,GAEL1L,EAAA1I,EAAA2I,cAAA,gCC3CV6L,GAAe,IAAIhV,IACzBgV,GAAa7U,IAAI,mBAAoBoQ,IAAK0E,qBAC1CD,GAAa7U,IAAI,iBAAkBoQ,IAAK2E,uBACxCF,GAAa7U,IAAI,gDAAiDoQ,IAAK4E,iCACvEH,GAAa7U,IAAI,iDAAkDoQ,IAAK6E,8BACxEJ,GAAa7U,IAAI,oDAAqDoQ,IAAK8E,sBAoV5DC,OAjVf,SAA2BlO,GAEvB,IAAMmO,EAAc,CAChBC,OAAQ,WAHkBtF,EAONC,oBAAS,GAPHC,EAAAhQ,OAAAyF,EAAA,EAAAzF,CAAA8P,EAAA,GAOvBuF,EAPuBrF,EAAA,GAOjBsF,EAPiBtF,EAAA,GAAAsC,EAQYvC,mBAAS,GARrBwC,EAAAvS,OAAAyF,EAAA,EAAAzF,CAAAsS,EAAA,GAQvBiD,EARuBhD,EAAA,GAQRiD,EARQjD,EAAA,GAUxBkD,EAAgB,IAAI7V,IACtBoH,EAAMtE,QAAQxB,YAAY0B,IAAI,SAAAyD,GAC1B,MAAO,CAACA,EAAIlB,gBAAiBkB,EAAIvD,mBAGzC,SAAS4S,EAAuB7U,GlB6S7B,IAA0BnF,EkB5SzBsL,EAAMqB,YlB4SmB3M,EkB5SSmF,EAAE7B,OAAOZ,MlB6SxC,SAAC8H,GACA,OAAOlG,OAAAmG,EAAA,EAAAnG,CAAA,GAAQkG,EAAf,CACYlE,cAAe,CACXC,QAAQ,CACJC,WAAYxG,EACZmE,OAAQqG,EAAclE,cAAcC,QAAQpC,OAC5CsC,gBAAiB+D,EAAclE,cAAcC,QAAQE,gBACrDC,UAAW8D,EAAclE,cAAcC,QAAQG,UAC/CE,YAAa4D,EAAclE,cAAcC,QAAQK,YACjDD,WAAY6D,EAAclE,cAAcC,QAAQI,WAChDE,YAAa2D,EAAclE,cAAcC,QAAQM,aAErDC,WAAW0D,EAAclE,cAAcQ,iBkBtT/D,SAASmT,EAAuB9U,GlBwY7B,IAAwB+U,EkBvYvB5O,EAAMqB,YlBuYiBuN,EkBvYS/U,EAAE7B,OAAOZ,MlBwYtC,SAAC8H,GACJ,OAAOlG,OAAAmG,EAAA,EAAAnG,CAAA,GAAQkG,EAAf,CACYlE,cAAe,CACXC,QAAQ,CACJC,WAAYgE,EAAclE,cAAcC,QAAQC,WAChDrC,OAAQqG,EAAclE,cAAcC,QAAQpC,OAC5CsC,gBAAiB+D,EAAclE,cAAcC,QAAQE,gBACrDC,UAAW8D,EAAclE,cAAcC,QAAQG,UAC/CE,YAAa4D,EAAclE,cAAcC,QAAQK,YACjDD,WAAYuT,EACZrT,YAAa2D,EAAclE,cAAcC,QAAQM,aAErDC,WAAW0D,EAAclE,cAAcQ,iBkBjZ3D,SAASqT,EAAsBhV,GlBwT5B,IAAyBgF,EkBvTxBmB,EAAMqB,YlBuTkBxC,EkBvTShF,EAAE7B,OAAOZ,MlBwTvC,SAAC8H,GACJ,OAAOlG,OAAAmG,EAAA,EAAAnG,CAAA,GAAQkG,EAAf,CACYlE,cAAe,CACXC,QAAQ,CACJC,WAAYgE,EAAclE,cAAcC,QAAQC,WAChDrC,OAAQqG,EAAclE,cAAcC,QAAQpC,OAC5CsC,gBAAiB+D,EAAclE,cAAcC,QAAQE,gBACrDC,UAAWyD,EACXvD,YAAa4D,EAAclE,cAAcC,QAAQK,YACjDD,WAAY6D,EAAclE,cAAcC,QAAQI,WAChDE,YAAa2D,EAAclE,cAAcC,QAAQM,aAErDC,WAAW0D,EAAclE,cAAcQ,iBkBjU3D,SAASsT,EAAuBjV,GlBuU7B,IAAuBhB,EkBtUtBmH,EAAMqB,YlBsUgBxI,EkBtUSgB,EAAE7B,OAAOZ,MlBuUrC,SAAC8H,GACJ,OAAOlG,OAAAmG,EAAA,EAAAnG,CAAA,GAAQkG,EAAf,CACYlE,cAAe,CACXC,QAAQ,CACJC,WAAYgE,EAAclE,cAAcC,QAAQC,WAChDrC,OAAQA,EACRsC,gBAAiB+D,EAAclE,cAAcC,QAAQE,gBACrDC,UAAW8D,EAAclE,cAAcC,QAAQG,UAC/CE,YAAa4D,EAAclE,cAAcC,QAAQK,YACjDD,WAAY6D,EAAclE,cAAcC,QAAQI,WAChDE,YAAa2D,EAAclE,cAAcC,QAAQM,aAErDC,WAAW0D,EAAclE,cAAcQ,iBkBhV3D,SAASuT,EAA0BlV,GlBsVhC,IAA0BmV,EkBrVzBhP,EAAMqB,YlBqVmB2N,EkBrVSnV,EAAE7B,OAAOZ,MlBsVxC,SAAC8H,GACJ,OAAOlG,OAAAmG,EAAA,EAAAnG,CAAA,GAAQkG,EAAf,CACYlE,cAAe,CACXC,QAAQ,CACJC,WAAYgE,EAAclE,cAAcC,QAAQC,WAChDrC,OAAQqG,EAAclE,cAAcC,QAAQpC,OAC5CsC,gBAAiB6T,EACjB5T,UAAW8D,EAAclE,cAAcC,QAAQG,UAC/CE,YAAa4D,EAAclE,cAAcC,QAAQK,YACjDD,WAAY6D,EAAclE,cAAcC,QAAQI,WAChDE,YAAa2D,EAAclE,cAAcC,QAAQM,aAErDC,WAAW0D,EAAclE,cAAcQ,iBkB/V3D,SAASyT,EAAa3T,GAClB0E,EAAMqB,WlBoWP,SAA2B/F,GAC9B,OAAO,SAAC4D,GACJ,OAAOlG,OAAAmG,EAAA,EAAAnG,CAAA,GAAQkG,EAAf,CACYlE,cAAe,CACXC,QAAQ,CACJC,WAAYgE,EAAclE,cAAcC,QAAQC,WAChDrC,OAAQqG,EAAclE,cAAcC,QAAQpC,OAC5CsC,gBAAiB+D,EAAclE,cAAcC,QAAQE,gBACrDC,UAAW8D,EAAclE,cAAcC,QAAQG,UAC/CE,YAAaA,EACbD,WAAY6D,EAAclE,cAAcC,QAAQI,WAChDE,YAAa2D,EAAclE,cAAcC,QAAQM,aAErDC,WAAW0D,EAAclE,cAAcQ,ekBjXtC0T,CAAkB5T,IAqBvC,IADA,IAAM6T,EAAU,GACP1a,EAAI,EAAGA,GAAKuL,EAAMtE,QAAQxB,YAAYxF,OAAQD,IACnD0a,EAAQta,KAAKiN,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAAO3C,EAAG8N,IAAG,kBAAA7I,OAAoBjF,IAAMA,IAGhE,IAoFI2a,EACAtF,EACAuF,EAtFEjR,EAAU4B,EAAMtE,QAAQxB,YAAY0B,IAAI,SAAA3E,GAAO,OACjD6K,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAASH,EAAQkH,gBAAiBoE,IAAG,cAAA7I,OAAgBzC,EAAQkH,kBAChElH,EAAQkH,mBAIXmR,EAAajS,MAAMkB,KAAKqP,IAAchS,IAAI,SAAApC,GAAA,IAAAgF,EAAAxF,OAAAyF,EAAA,EAAAzF,CAAAQ,EAAA,GAAE+I,EAAF/D,EAAA,UAAAA,EAAA,GAC5CsD,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAASmL,EAAKA,IAAG,iBAAA7I,OAAmB6I,IAAQA,KAGlDgN,EAAa,CAAC,EAAG,GAAI,IAAI3T,IAAI,SAAAiD,GAAK,OACpCiD,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAASyH,EAAO0D,IAAG,iBAAA7I,OAAmBmF,IAAUA,KAGtD2Q,EAAc,CAAC,gBAAiB,mBAAmB5T,IAAI,SAAAnB,GAAM,OAC/DqH,EAAA1I,EAAA2I,cAAA,UAAQ3K,MAASqD,EAAQ8H,IAAG,mBAAA7I,OAAqBe,IAAWA,KAoE5DgV,EAAa,GAIjB,GAAGzP,EAAMtE,QAAQV,cAAcQ,WAAW9G,OAAS,EAAG,CAClDoV,EAAU,CACNhI,EAAA1I,EAAA2I,cAACiI,GAAA,EAAD,CACI/H,KAAK,QACLM,IAAK,cACLpL,GAAI,cACJC,MAAO,EACP6S,QAAQ,kBACR/H,SAAU,SAAAmK,GAAUmC,EAAiBzZ,SAASsX,EAAMrU,OAAOZ,UACvD0K,EAAA1I,EAAA2I,cAAAD,EAAA1I,EAAA+K,SAAA,oBAAcrC,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,mCAEnCF,EAAA1I,EAAA2I,cAACiI,GAAA,EAAD,CACI/H,KAAK,QACLM,IAAK,OACLpL,GAAI,OACJC,MAAO,EACP6S,QAAQ,kBACR/H,SAAU,SAAAmK,GAAUmC,EAAiBzZ,SAASsX,EAAMrU,OAAOZ,UACvD0K,EAAA1I,EAAA2I,cAAAD,EAAA1I,EAAA+K,SAAA,cAERrC,EAAA1I,EAAA2I,cAACiI,GAAA,EAAD,CACI/H,KAAK,QACLM,IAAK,YACLpL,GAAI,YACJC,MAAO,EACP6S,QAAQ,kBACR/H,SAAU,SAAAmK,GAAUmC,EAAiBzZ,SAASsX,EAAMrU,OAAOZ,UACvD0K,EAAA1I,EAAA2I,cAAAD,EAAA1I,EAAA+K,SAAA,KAAErC,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,0BAAf,gBAGS,IAAlBuM,EACCkB,EAAazP,EAAMtE,QAAQV,cAAcQ,WAAWwE,EAAMtE,QAAQV,cAAcC,QAAQM,aAAa7E,MAAMgZ,YAClF,IAAlBnB,EACPkB,EAAazP,EAAMtE,QAAQV,cAAcQ,WAAWwE,EAAMtE,QAAQV,cAAcC,QAAQM,aAAa7E,MAAMiZ,KAClF,IAAlBpB,IACPkB,EAAazP,EAAMtE,QAAQV,cAAcQ,WAAWwE,EAAMtE,QAAQV,cAAcC,QAAQM,aAAa7E,MAAMkZ,WAE/G,IAAI/U,EAA+D,kBAAnDmF,EAAMtE,QAAQV,cAAcC,QAAQI,WAChD2E,EAAMtE,QAAQlB,OAAOK,QACrBmF,EAAMtE,QAAQZ,SAASD,QAC3BuU,EAAYK,EAAW7T,IAAI,SAAC7E,EAAMkI,GAAP,OACvB6C,EAAA1I,EAAA2I,cAAC8N,GAAD,CAAMhR,MAAOI,EAAOhI,QAASF,EAAM8D,QAASA,EAAS6S,QAASe,EAAelM,IAAG,QAAA7I,OAAUuF,OAC9FoQ,EAAgBvN,EAAA1I,EAAA2I,cAAA,SACK/B,EAAMtE,QAAQV,cAAcQ,WAAWwE,EAAMtE,QAAQV,cAAcC,QAAQM,aAAa1C,OAAQ,IADrG,IAC2G,IACtGmH,EAAMtE,QAAQV,cAAcQ,WAAWwE,EAAMtE,QAAQV,cAAcC,QAAQM,aAAaL,WAAY,IAFzG,IAE+G,IAC1G8E,EAAMtE,QAAQV,cAAcQ,WAAWwE,EAAMtE,QAAQV,cAAcC,QAAQM,aAAaJ,gBAAiB,IAH9G,IAGoH,IAC/G6E,EAAMtE,QAAQV,cAAcQ,WAAWwE,EAAMtE,QAAQV,cAAcC,QAAQM,aAAaF,YAIjH,IAAMyU,EAAkBhO,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CAAgB0N,QAAQ,QAAQzN,UAAU,SAASE,QAC/CV,EAAA1I,EAAA2I,cAACU,EAAA,EAAD,CAAStL,GAAG,iBACR2K,EAAA1I,EAAA2I,cAACU,EAAA,EAAQC,OAAT,CAAgBC,GAAG,KAAKX,UAAW,sBAAsBF,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,yBAAyBa,MAAO,CAACC,aAAa,SAApH,mBACAhB,EAAA1I,EAAA2I,cAACU,EAAA,EAAQM,KAAT,CAAcf,UAAW,aAAzB,wEAEIF,EAAA1I,EAAA2I,cAAA,WAFJ,mJAOJD,EAAA1I,EAAA2I,cAAA,QAAMc,MAAOsL,EAAYnM,UAAW,aAApC,UACWF,EAAA1I,EAAA2I,cAAA,WAAKD,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,yBAInDgO,EAAkBlO,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CAAgB0N,QAAQ,QAAQzN,UAAU,MAAME,QAC5CV,EAAA1I,EAAA2I,cAACU,EAAA,EAAD,CAAStL,GAAG,iBACR2K,EAAA1I,EAAA2I,cAACU,EAAA,EAAQC,OAAT,CAAgBC,GAAG,KAAKX,UAAW,sBAAsBF,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,yBAAyBa,MAAO,CAACC,aAAa,SAApH,wBACAhB,EAAA1I,EAAA2I,cAACU,EAAA,EAAQM,KAAT,CAAcf,UAAW,aAAzB,sGAEIF,EAAA1I,EAAA2I,cAAA,WAFJ,qBAMJD,EAAA1I,EAAA2I,cAAA,QAAMc,MAAOsL,EAAYnM,UAAW,aAApC,WACYF,EAAA1I,EAAA2I,cAAA,WAAKD,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,yBAI1D,OAAQF,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,aACThC,EAAMtE,QAAQV,cAAcQ,WAAW9G,OAAS,GAC9CoN,EAAA1I,EAAA2I,cAACkO,GAAA,EAAD,KACInO,EAAA1I,EAAA2I,cAAC6K,GAAA,EAAD,CACI1C,QAAS,kBAAMoE,GAASD,IACxBpE,QAAQ,kBACRiG,KAAK,KACLC,gBAAc,wBACdC,gBAAe/B,GALnB,uBAMyB,IAAKA,EAAOvM,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,4BAAkCF,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,+BAEjGF,EAAA1I,EAAA2I,cAAA,YAGRD,EAAA1I,EAAA2I,cAACsO,GAAA,EAAD,CAAUC,GAAIjC,GACVvM,EAAA1I,EAAA2I,cAAA,WACID,EAAA1I,EAAA2I,cAAA,4CAA2C,IAC3CD,EAAA1I,EAAA2I,cAAA,UAAQ5K,GAAG,oBAAoBrB,KAAK,oBAAoBkP,aAAchF,EAAMtE,QAAQV,cAAcC,QAAQpC,OAAQqJ,SAAU,SAACrI,GAAD,OAAOiV,EAAsBjV,KACpJuE,GAEJ,IACD0D,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,0BAA0Ba,MAAO,CAACiB,YAAY,OAAQhB,aAAa,UAC/E9C,EAAMtE,QAAQxB,YAAYN,OAAO,SAAAC,GAAC,OAAIA,EAAEsE,kBAAoB6B,EAAMtE,QAAQV,cAAcC,QAAQpC,SAAQ+C,IAAI,SAAA/B,GAAC,OAAIA,EAAEiC,iBAAgB,GACpIgG,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,sBAAc+N,EAAd,YAA8C,IAC9ChO,EAAA1I,EAAA2I,cAAA,UAAQ5K,GAAG,cAAcrB,KAAK,cAAckP,aAAchF,EAAMtE,QAAQV,cAAcC,QAAQC,WAAYgH,SAAU,SAACrI,GAAD,OAAO6U,EAAsB7U,KAC5IsV,GAELrN,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,2CAA0C,IAC1CD,EAAA1I,EAAA2I,cAAA,UAAQ5K,GAAG,aAAarB,KAAK,aAAakP,aAAchF,EAAMtE,QAAQV,cAAcC,QAAQG,UAAW8G,SAAU,SAACrI,GAAD,OAAOgV,EAAqBhV,KACxI0V,GAELzN,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,sCAAqC,IACrCD,EAAA1I,EAAA2I,cAAA,UAAQ5K,GAAG,YAAYrB,KAAK,YAAYkP,aAAchF,EAAMtE,QAAQV,cAAcC,QAAQE,gBAAiB+G,SAAU,SAACrI,GAAD,OAAOkV,EAAyBlV,KAChJyV,GAELxN,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,iCAAgC,IAChCD,EAAA1I,EAAA2I,cAAA,UAAQ5K,GAAG,UAAUrB,KAAK,UAAUkP,aAAchF,EAAMtE,QAAQV,cAAcC,QAAQI,WAAY6G,SAAU,SAACrI,GAAD,OAAO8U,EAAsB9U,KACpI2V,GAEL1N,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAA,oBAAYiO,EAAZ,oCAjKpB,WACI,IAAMO,EAAajY,yBAAc0H,EAAMtE,QAAQxB,YAAYxF,OAAQsL,EAAMtE,QAAQV,cAAcC,QAAQC,WAAY8E,EAAMtE,QAAQrB,MAAME,qBAEjIyH,EAAYuO,EAAa,IAAU,wBAA0BA,EAAa,IAAW,uBAAyB,uBAC9GC,EAAOD,EAAa,IAAU,0BAA4BA,EAAa,IAAW,6BAA+B,iCAGjHjN,EAAS,CACXiE,MAHcgJ,EAAa,IAAa,MAAQ,OAIhD9I,QAAS,eACT2G,OAAQ,WAKZ,OAAQtM,EAAA1I,EAAA2I,cAACM,EAAA,EAAD,CAAgB0N,QAAQ,QAAQzN,UAAU,SAASE,QAC/CV,EAAA1I,EAAA2I,cAACU,EAAA,EAAD,CAAStL,GAAG,iBACR2K,EAAA1I,EAAA2I,cAACU,EAAA,EAAQC,OAAT,CAAgBC,GAAG,KAAKX,UAAWA,GAAWF,EAAA1I,EAAA2I,cAAA,KAAGC,UAAWwO,EAAM3N,MAAO,CAACC,aAAa,SAAvF,uBACAhB,EAAA1I,EAAA2I,cAACU,EAAA,EAAQM,KAAT,mEAEIjB,EAAA1I,EAAA2I,cAAA,WAFJ,8DAIID,EAAA1I,EAAA2I,cAAA,WAJJ,gCAMID,EAAA1I,EAAA2I,cAAA,WANJ,sDAUJD,EAAA1I,EAAA2I,cAAA,QAAMC,UAAWA,EAAWa,MAAOS,GAC1BiN,EAAWE,oBAAezW,EAAW,CAAE0W,sBAAsB,MAoIPC,IAAoC,IAC/F7O,EAAA1I,EAAA2I,cAAA,WACAD,EAAA1I,EAAA2I,cAAC6K,GAAA,EAAD,CACIzV,GAAG,iBACHrB,KAAK,WACLmU,QAAQ,kBACRiG,KAAK,KACLrD,SAAU7M,EAAMtE,QAAQV,cAAcC,QAAQK,YAC9C4O,QAAS,kBAhPjC,WACI+E,GAAa,GACb,IAAM2B,EAAmB5Q,EAAMtE,QAAQxB,YAAY0B,IAAI,SAAA/B,GAAC,OAAIA,EAAEsE,kBAExD0S,EAAU,CACZtX,UAAWyG,EAAMtE,QAAQrB,MAAMC,oBAC/BG,OAA2D,kBAAnDuF,EAAMtE,QAAQV,cAAcC,QAAQI,WAAiC2E,EAAMtE,QAAQlB,OAAOC,OAASuF,EAAMtE,QAAQZ,SAASL,OAClIP,YAAa0W,EACb/X,OAAOmH,EAAMtE,QAAQV,cAAcC,QAAQpC,OAC3CiY,cAAe9Q,EAAMtE,QAAQV,cAAcC,QAAQC,WACnD6V,cAAe/Q,EAAMtE,QAAQV,cAAcC,QAAQE,gBACnD6V,aAAchR,EAAMtE,QAAQV,cAAcC,QAAQG,WAGpD4E,EAAMiR,aAAaJ,GAkOcK,KANnB,UAOgB,IACNlR,EAAMtE,QAAQV,cAAcC,QAAQK,aAAewG,EAAA1I,EAAA2I,cAACoP,GAAA,EAAD,CACjDxO,GAAG,OACHyO,UAAU,SACVlB,KAAK,KACLmB,KAAK,SACLC,cAAY,UAGxBxP,EAAA1I,EAAA2I,cAACkO,GAAA,EAAD,KACInO,EAAA1I,EAAA2I,cAACwP,GAAA,EAAD,KACIzP,EAAA1I,EAAA2I,cAACyP,GAAA,EAAD,CAAKC,GAAI,IACT3P,EAAA1I,EAAA2I,cAACyP,GAAA,EAAD,CAAKC,GAAI,GACL3P,EAAA1I,EAAA2I,cAAA,OAAKC,UAAU,kBAInBF,EAAA1I,EAAA2I,cAACyP,GAAA,EAAD,CAAKC,GAAI,QAKzB3P,EAAA1I,EAAA2I,cAAA,WAEC/B,EAAMtE,QAAQV,cAAcQ,WAAW9G,OAAS,GAC7CoN,EAAA1I,EAAA2I,cAAA,WACID,EAAA1I,EAAA2I,cAAC6K,GAAA,EAAD,CACI/J,MAAO,CAAC6O,YAAY,OACpBnP,IAAK,MACLpL,GAAI,OACJ8S,QAAQ,kBACR4C,SAA8D,IAApD7M,EAAMtE,QAAQV,cAAcC,QAAQM,YAC9C2O,QAAS,SAAAmC,GAAUrM,EAAMqB,WAAWrC,EAAegB,EAAMtE,QAAQV,cAAcC,QAAQM,YAAc,MACjGuG,EAAA1I,EAAA2I,cAAAD,EAAA1I,EAAA+K,SAAA,KAAErC,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,8BAAf,cAERF,EAAA1I,EAAA2I,cAACwI,GAAA,EAAD,CAAmBtI,KAAK,QAAQnM,KAAK,UAAUkP,aAAc,GACxD8E,GAELhI,EAAA1I,EAAA2I,cAAC6K,GAAA,EAAD,CACI/J,MAAO,CAAC8O,WAAW,OACnBpP,IAAK,MACLpL,GAAI,OACJ8S,QAAQ,kBACR4C,SAAU7M,EAAMtE,QAAQV,cAAcC,QAAQM,cAAgByE,EAAMtE,QAAQV,cAAcQ,WAAW9G,OAAS,EAC9GwV,QAAS,SAAAmC,GAAUrM,EAAMqB,WAAWrC,EAAegB,EAAMtE,QAAQV,cAAcC,QAAQM,YAAc,MACjGuG,EAAA1I,EAAA2I,cAAAD,EAAA1I,EAAA+K,SAAA,aAAOrC,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,iCAE5BF,EAAA1I,EAAA2I,cAAA,WACHsN,EACAD,mBCjHNwC,OAzMf,WAEI,IAAMC,EAAiBC,iBAAO,MACxBC,EAAeD,iBAAO,MAGxBE,EAAiBlY,EAErBmY,oBAAU,YACY,eAAAzY,EAAAR,OAAAkH,EAAA,EAAAlH,CAAAmH,EAAA/G,EAAAgH,KAAG,SAAAW,IAAA,OAAAZ,EAAA/G,EAAAmH,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAzJ,MAAA,cAAAyJ,EAAAzJ,KAAA,EACX2a,IAAMlc,IAAN,4DAEJmc,KAAK,SAAA/c,MAEJgd,MAAM,SAAAC,GAEL3R,QAAQC,IAAI0R,KAPC,wBAAArR,EAAAQ,SAAAT,MAAH,yBAAAvH,EAAAG,MAAA+H,KAAAC,YAAA,EAUhB2Q,IACH,IApBQ,IAAAxJ,EAuBmBC,mBAASiJ,GAvB5BhJ,EAAAhQ,OAAAyF,EAAA,EAAAzF,CAAA8P,EAAA,GAuBJpN,EAvBIsN,EAAA,GAuBK3H,EAvBL2H,EAAA,GAAAsC,EAwBmBvC,oBAAS,GAxB5BwC,EAAAvS,OAAAyF,EAAA,EAAAzF,CAAAsS,EAAA,GAwBJiH,EAxBIhH,EAAA,GAwBMjK,EAxBNiK,EAAA,GAAAC,EAyBqBzC,mBAAS,CAAC9E,QAAQ8F,YAAS,KAzBhD0B,EAAAzS,OAAAyF,EAAA,EAAAzF,CAAAwS,EAAA,GAyBJtG,EAzBIuG,EAAA,GAyBMpB,EAzBNoB,EAAA,GAAAG,EA0BmC7C,mBAAS,IA1B5C8C,EAAA7S,OAAAyF,EAAA,EAAAzF,CAAA4S,EAAA,GA0BJ4G,EA1BI3G,EAAA,GA0Ba4G,EA1Bb5G,EAAA,GAAA6G,EA8BW3J,mBAAS,QA9BpB4J,EAAA3Z,OAAAyF,EAAA,EAAAzF,CAAA0Z,EAAA,GA8BJE,EA9BID,EAAA,GA8BCpR,EA9BDoR,EAAA,GA0CX,SAAS1B,EAAaJ,IAEH,eAAArS,EAAAxF,OAAAkH,EAAA,EAAAlH,CAAAmH,EAAA/G,EAAAgH,KAAG,SAAAC,IAAA,OAAAF,EAAA/G,EAAAmH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAjJ,MAAA,cAAAiJ,EAAAjJ,KAAA,EACR2a,IAAMW,KAAN,oEAGJhC,GACAsB,KAAK,SAAA/c,GnBiYZ,IAAwBsB,EmBhYf2K,GnBgYe3K,EmBhYWtB,EAAON,KAAK4B,MnBiY3C,SAACwI,GAWJ,OATAA,EAAclE,cAAcQ,WAAW3G,KAAK,CAChC6B,MAAOA,EACPwE,WAAYgE,EAAclE,cAAcC,QAAQC,WAChDrC,OAAQqG,EAAclE,cAAcC,QAAQpC,OAC5CsC,gBAAiB+D,EAAclE,cAAcC,QAAQE,gBACrDE,WAAY6D,EAAclE,cAAcC,QAAQI,aAIrDrC,OAAAmG,EAAA,EAAAnG,CAAA,GAAQkG,EAAf,CACYlE,cAAe,CACXC,QAAQ,CACJC,WAAYgE,EAAclE,cAAcC,QAAQC,WAChDrC,OAAQqG,EAAclE,cAAcC,QAAQpC,OAC5CsC,gBAAiB+D,EAAclE,cAAcC,QAAQE,gBACrDC,UAAW8D,EAAclE,cAAcC,QAAQG,UAC/CE,aAAa,EACbD,WAAY6D,EAAclE,cAAcC,QAAQI,WAChDE,YAAa2D,EAAclE,cAAcQ,WAAW9G,OAAS,GAEjE8G,WAAW0D,EAAclE,cAAcQ,mBmBtZhD4W,MAAM,SAAAC,GAEL3R,QAAQC,IAAI0R,KATF,wBAAA7R,EAAAgB,SAAAnB,MAAH,yBAAA7B,EAAA7E,MAAA+H,KAAAC,YAAA,EAYbmR,GAxBNb,oBAAU,WACiB,KAApBO,IACC9R,QAAQC,IAAI,sBAAwB6R,GACpCX,EAAekB,QAAQC,QACvBC,IAAIC,gBAAgBV,GACpBC,EAAmB,MAExB,CAACD,IAgCJ,IAAIvS,EAAQ,eAAAvB,EAAA1F,OAAAkH,EAAA,EAAAlH,CAAAmH,EAAA/G,EAAAgH,KAAG,SAAA+S,EAAOtZ,GAAP,IAAAyG,EAAA,OAAAH,EAAA/G,EAAAmH,KAAA,SAAA6S,GAAA,cAAAA,EAAA3S,KAAA2S,EAAA7b,MAAA,OACXsC,EAAE+G,kBACIN,EAAS,IAAIO,YACZC,OAAP,eAAAnC,EAAA3F,OAAAkH,EAAA,EAAAlH,CAAAmH,EAAA/G,EAAAgH,KAAgB,SAAAiT,EAAOxZ,GAAP,IAAA/D,EAAAwd,EAAA,OAAAnT,EAAA/G,EAAAmH,KAAA,SAAAgT,GAAA,cAAAA,EAAA9S,KAAA8S,EAAAhc,MAAA,OACRzB,EAAOmL,SAASC,eAAe,aAAaC,MAAMC,KAAK,GAAGtL,KAAK+H,MAAM,KAExD,SADbyV,EAAYxd,EAAKA,EAAKpB,OAAS,KAE/B2M,EAAW3E,EAAmB7C,EAAE7B,OAAO5C,SACvCkM,GAAU,GACVC,EAAO,WACa,QAAd+R,IACNjS,EAAW5F,EAAmBoB,KAAKC,MAAMjD,EAAE7B,OAAO5C,UAClDkM,GAAU,GACVC,EAAO,WAVC,wBAAAgS,EAAA/R,SAAA6R,MAAhB,gBAAA5R,GAAA,OAAA9C,EAAAhF,MAAA+H,KAAAC,YAAA,GAaArB,EAAOsB,WAAW/H,EAAE7B,OAAOmJ,MAAM,IAhBtB,wBAAAiS,EAAA5R,SAAA2R,MAAH,gBAAAtR,GAAA,OAAAnD,EAAA/E,MAAA+H,KAAAC,YAAA,GA4DZ,OACIG,EAAA1I,EAAA2I,cAAAD,EAAA1I,EAAA+K,SAAA,KACIrC,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,SAETa,MAAO,CAAC4E,QAAQ,QAChB+L,SAAU9X,EAAQ3B,YAAc,OAChC0Z,KAAMjB,EACNkB,IAAK7B,GALT,eAQA/P,EAAA1I,EAAA2I,cAAA,SAAO2R,IAAK3B,EAERlP,MAAO,CAAC4E,QAAQ,QAChBxF,KAAK,OACL9K,GAAG,YACH+K,SAAY,SAACrI,GAAD,OAAOoG,EAASpG,IAC5BsI,OAAO,eAEXL,EAAA1I,EAAA2I,cAAC4R,EAAA,EAAD,CAAQC,kBAAgB,EAACC,GAAG,QAAQC,OAAO,KAAKC,OAAO,MAAMlR,MAAO,CAACiB,YAAY,QAC7EhC,EAAA1I,EAAA2I,cAAC4R,EAAA,EAAOK,MAAR,KAAclS,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,oBAAoBa,MAAO,CAACC,aAAa,UAApE,gBACAhB,EAAA1I,EAAA2I,cAAC4R,EAAA,EAAOM,OAAR,CAAe9D,gBAAc,0BAC7BrO,EAAA1I,EAAA2I,cAAC4R,EAAA,EAAOtD,SAAR,CAAiBlZ,GAAG,yBACpB2K,EAAA1I,EAAA2I,cAACmS,EAAA,EAAD,CAAKlS,UAAU,UACXmS,SAAO,EAAClK,QAAQ,OAChBmK,UAAWxB,EACXyB,SAAU,SAACC,GAAD,OAAiB/S,EAAO+S,KAClCxS,EAAA1I,EAAA2I,cAACwS,EAAA,gBAAD,CAAiBC,MAAM,UAAUrd,GAAG,4BAChC2K,EAAA1I,EAAA2I,cAACwS,EAAA,gBAAD,CAAiBC,MAAM,OAAOrd,GAAG,qCAC7B2K,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBxK,QA5F1C,WACI6H,EAAagB,QAAQC,UA2FD,aACAlR,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,aAAa9H,SAAS,SAAjD,gBAEJ/K,EAAA1I,EAAA2I,cAACwS,EAAA,gBAAD,CAAiBC,MAAM,OAAOrd,GAAG,qCAC7B2K,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBxK,QAvG1C,WACI,IAAI0K,EAAS/X,KAAKgY,UnB8InB,SAAuBnZ,GAC1B,MAAO,CACH3B,YAAa2B,EAAQ3B,YACrBE,eAAgByB,EAAQzB,eACxBC,YAAawB,EAAQxB,YACrBE,eAAgBsB,EAAQtB,eACxBI,OAAO,CACHC,OAAQiB,EAAQlB,OAAOC,QAE3BK,SAAS,CACLC,UAAWW,EAAQZ,SAASC,WAEhCC,cAAc,CACVC,QAAQ,CACJC,WAAYQ,EAAQV,cAAcC,QAAQC,WAC1CrC,OAAQ6C,EAAQV,cAAcC,QAAQpC,OACtCsC,gBAAiBO,EAAQV,cAAcC,QAAQE,gBAC/CC,UAAWM,EAAQV,cAAcC,QAAQG,UACzCC,WAAYK,EAAQV,cAAcC,QAAQI,WAC1CE,YAAaG,EAAQV,cAAcC,QAAQM,aAE/CC,WAAYE,EAAQV,cAAcQ,amBnKVsZ,CAAcpZ,GACtC,KAAM,GACJqZ,EAAO,IAAIC,KAAK,CAACJ,IACvBnC,EAAmBQ,IAAIgC,gBAAgBF,MAmGnB,WACAjT,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,aAAa9H,SAAS,SAAjD,cAEJ/K,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,SAAS9H,SAAS,SAA7C,WAEJ/K,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAD,CAAaD,MAAM,SAAU3H,UAAW0F,EAAUpb,GAAG,sBACjD2K,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,SAAS9H,UAAW0F,GAA/C,UACAzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,WAAW9H,UAAW0F,GAAjD,YACAzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,OAAO9H,UAAW0F,GAA7C,SAEJzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAD,CAAaD,MAAM,cAAc3H,UAAW0F,EAAUpb,GAAG,sBACrD2K,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,QAAQ9H,UAAW0F,GAA9C,SACAzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,YAAY9H,UAAW0F,GAAlD,aACAzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,MAAM9H,UAAW0F,GAA5C,QAEJzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAD,CAAaD,MAAM,UAAU3H,UAAW0F,EAAUpb,GAAG,sBACjD2K,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,UAAU9H,UAAW0F,GAAhD,kBACAzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,MAAM9H,UAAW0F,GAA5C,uBACAzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,QAAQ9H,UAAW0F,GAA9C,yBAEJzQ,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAD,CAAaD,MAAM,QAAQrd,GAAG,sBAC1B2K,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,WAA3B,YACA7S,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,aAA3B,aACA7S,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,eAA3B,gBACA7S,EAAA1I,EAAA2I,cAAC0S,EAAA,EAAYC,KAAb,CAAkBC,SAAS,YAA3B,aAEJ7S,EAAA1I,EAAA2I,cAACmS,EAAA,EAAIgB,KAAL,CAAUP,SAAS,YAAW7S,EAAA1I,EAAA2I,cAAA,KAAGC,UAAU,yBAKnDF,EAAA1I,EAAA2I,cAAA,WAvGR,SAA6BoT,GACzB,OAAOA,GACH,IAAK,OACD,OAAOrT,EAAA1I,EAAA2I,cAACqT,EAAD,CAAU3a,OAAQiB,EAAS2F,WAAYA,IAClD,IAAK,WACD,OAAOS,EAAA1I,EAAA2I,cAACsT,EAAD,CAAe5a,OAAQiB,EAAS2F,WAAYA,EAAYE,OAAQ,kBAAMA,EAAO,WAAWD,UAAWA,IAC9G,IAAK,SACD,OAAOQ,EAAA1I,EAAA2I,cAACuT,EAAD,CAAY5Z,QAASA,EAAS2F,WAAYA,EAAY6D,SAAUA,IAC3E,IAAK,WACD,OAAOpD,EAAA1I,EAAA2I,cAACwT,EAAD,CAAc7Z,QAASA,EAAS2F,WAAYA,EAAY6D,SAAUA,IAC7E,IAAK,OACD,OAAOpD,EAAA1I,EAAA2I,cAACyT,GAAD,CAAgB9Z,QAASA,EAAS2F,WAAYA,EAAY6D,SAAUA,IAC/E,IAAK,QACD,OAAOpD,EAAA1I,EAAA2I,cAAC0T,EAAD,CAAgB/Z,QAASA,EAAS2F,WAAYA,EAAY6D,SAAUA,IAC/E,IAAK,YACD,OAAOpD,EAAA1I,EAAA2I,cAAC2T,GAAD,CAAeha,QAASA,EAAS2F,WAAYA,EAAY6D,SAAUA,IAC9E,IAAK,MACD,OAAOpD,EAAA1I,EAAA2I,cAAC4T,GAAD,CAASja,QAASA,EAAS2F,WAAYA,EAAY6D,SAAUA,IACxE,IAAK,UACD,OAAOpD,EAAA1I,EAAA2I,cAAC6T,GAAD,CAAmBla,QAASA,EAAS2F,WAAYA,EAAY6D,SAAUA,EAAU+L,aAAcA,IAC1G,IAAK,MACD,OAAOnP,EAAA1I,EAAA2I,cAAC8T,EAAD,CAAuB/P,SAAS,wBAC3C,IAAK,QACD,OAAOhE,EAAA1I,EAAA2I,cAAC8T,EAAD,CAAuB/P,SAAS,yBAC3C,IAAK,WACD,OAAOhE,EAAA1I,EAAA2I,cAAC+T,GAAD,CAAcpa,QAASA,EAAS2F,WAAYA,EAAY6D,SAAUA,EAAUmF,YAAaA,IACpG,IAAK,UACD,OAAOvI,EAAA1I,EAAA2I,cAAC8T,EAAD,CAAuB/P,SAAS,iBAC3C,IAAK,YACD,OAAOhE,EAAA1I,EAAA2I,cAAC8T,EAAD,CAAuB/P,SAAS,4BAC3C,IAAK,cACD,OAAOhE,EAAA1I,EAAA2I,cAAC8T,EAAD,CAAuB/P,SAAS,2BAC3C,IAAK,WACD,OAAOhE,EAAA1I,EAAA2I,cAAC8T,EAAD,CAAuB/P,SAAS,2BAE3C,QACI,QAmEGiQ,CAAoBnD,MC1NvCoD,IAASxP,OACP1E,EAAA1I,EAAA2I,cAACkU,GAAD,MACAhV,SAASC,eAAe,mkBCfpBgV,EAAK9hB,EAAQ,KAGb+hB,EAAY,SAACrgB,GAAD,OAAUkD,OAAOod,OAAO,CAACC,SAAU,kBAAMvgB,MAG9C3B,EAAS6E,OAAOod,OAAO,CAChC9f,QAAS6f,EAAU,WACnB5f,UAAW4f,EAAU,WACrBG,MAAOH,EAAU,SACjBI,KAAMJ,EAAU,SAChBxe,IAAKwe,EAAU,OACfve,KAAMue,EAAU,UAiBb,SAASjT,EAAWnE,EAAOyX,GAC9B,IAAIC,EAAO1X,EAAMnD,IAAI,SAAA/B,GAAC,OAAI2c,EAAQ3c,KACjCD,OAAO,SAAA3C,GAAO,OAAgB,IAAZA,IAKnB,MAJe,CACXK,IAAKO,KAAKP,IAAIqC,MAAM,KAAM8c,GAC1Bpf,IAAKQ,KAAKR,IAAIsC,MAAM,KAAM8c,IAqB3B,SAASC,EAAgBtf,EAAOkN,GACnC,GAAa,IAAVlN,EAAa,MAAO,CACnBuf,IAAK,EACLC,MAAO,EACPC,KAAM,GAEV,IAAIzO,GAAuB,EAAd9D,EAAOhN,IAChBwf,EAAcxS,EAAOjN,IAAMiN,EAAOhN,IAClCyf,GAAY3f,EAAQgR,IAAW0O,EAAW,IAAOA,EAAa,GAC9DE,EAAI,EAAGC,EAAI,EAAG5d,EAAI,EAsBtB,OArBG,GAAK0d,GAAWA,GAAW,KAC1B1d,EAAI,EAAI0d,EAAU,GACZ,MAASA,GAAWA,GAAW,MACrCE,EAAI,EAAIF,EAAU,GAClB1d,EAAI,GACE,MAAS0d,GAAWA,GAAW,MACrCC,EAAI,EAAID,EAAU,IAClBE,EAAI,EACJ5d,GAAK,EAAI0d,EAAU,KACb,MAASA,GAAWA,GAAW,MACrCC,EAAI,EACJC,GAAK,EAAIF,EAAU,KAEnBC,EADM,MAASD,GAAWA,GAAW,GAChC,EAAIA,EAAU,IAGfE,EAAI5d,EAAI,EAKT,CACHsd,IAJJK,GAAK,IAKDJ,MAJJK,GAAK,IAKDJ,KAJJxd,GAAK,KAgBF,SAAS6d,EAAmBthB,GAE/B,OADU,GAAM,KAAQA,EAAS+gB,IAAQ,KAAQ/gB,EAASghB,MAAU,KAAQhhB,EAASihB,MAAO,IACjF,GAAM1iB,EAAOoiB,KAAOpiB,EAAOmiB,MAGnC,SAASa,EAAe/f,EAAOE,EAAKD,GACvC,OAAc,IAAVD,EACO,CAACggB,EAAE,EAAGC,EAAE,EAAGC,EAAE,GAEjB,CAACF,EAAE,EAAGC,EAAE,EAAKC,EAAE,GAGnB,SAASC,EAAangB,EAAOE,EAAKD,GACrC,GAAc,IAAVD,EACA,MAAO,CAACggB,EAAE,EAAGC,EAAE,EAAGC,EAAE,GACjB,GAAIhgB,IAAQD,EACf,MAAO,CAAC+f,EAAE,IAAM,IAAKC,EAAE,GAAIC,EAAE,KAEjC,IACME,GAAQpgB,EAAQE,GADRO,KAAKC,IAAIT,EAAMC,GAEzBmgB,EAAM,CAACL,EAAE,EAAGC,EAAE,GAAIC,EAAE,KAExB,OADAG,EAAIL,GAAuB,GAAjBvf,KAAKC,IAAI0f,GAAc,KAAO,IACjCC,EAGJ,SAASC,EAAYtgB,EAAOE,EAAKD,GACpC,GAAc,IAAVD,EACA,MAAO,CAACggB,EAAE,EAAGC,EAAE,EAAGC,EAAE,GACjB,GAAIhgB,IAAQD,EACf,MAAO,CAAC+f,EAAE,EAAI,IAAKC,EAAE,IAAKC,EAAE,IAEhC,IAAMK,EAAQ9f,KAAKC,IAAIT,EAAMC,GACvBkgB,GAAQpgB,EAAQE,GAAOqgB,EACvBC,EAAS,GAAKD,EAAQ,EAAI,GAAM,EAAI,GAAM,GAAKA,EAAQ,EAAI,GAC7DF,EAAM,CAACL,EAAE,EAAGC,EAAE,IAAKC,EAAE,IAEzB,OADAG,EAAIL,EAAKvf,KAAKC,IAAI,EAAI0f,IAAS,GAAKI,GAAU,IACvCH,EAGJ,SAASI,EAAczgB,EAAOE,EAAKD,GACtC,GAAc,IAAVD,EACA,MAAO,CAACggB,EAAE,EAAGC,EAAE,EAAGC,EAAE,GACjB,GAAIhgB,IAAQD,EACf,MAAO,CAAC+f,EAAE,IAAM,IAAKC,EAAE,IAAKC,EAAE,KAElC,IACME,GAAQpgB,EAAQE,GADRO,KAAKC,IAAIT,EAAMC,GAEzBmgB,EAAM,CAACL,EAAE,EAAGC,EAAE,IAAKC,EAAE,KAEzB,OADAG,EAAIL,GAAuB,GAAjBvf,KAAKC,IAAI0f,GAAc,IAAM,IAChCC,EAGJ,SAASrU,EAAcqU,GAC1B,IAAIT,EAAChe,OAAA8e,EAAA,EAAA9e,CAAA,GAAOye,GAMZ,OALGvB,EAAG6B,UAAUf,GAAGgB,UACfhB,EAAEM,EAAI,IAENN,EAAEM,EAAI,IAEHN,EAGJ,SAAS7T,EAAYsU,GACxB,aAAA/d,OAAsB,IAAR+d,EAAIL,EAAlB,MAAA1d,OAAsC,IAAR+d,EAAIJ,EAAlC,OAAA3d,OAAuD,IAAR+d,EAAIH,EAAnD,MAGG,SAASrU,EAAkBwU,GAC9B,IAAIre,EAAI8c,EAAG6B,UAAUN,GAAKQ,cAGtB5e,EAAI6c,EAAG6B,UAAUN,GAAKS,UAAUA,UAAUA,UAAUD,cACxD,iCAAAve,OAAmCL,EAAnC,MAAAK,OAAyCN,EAAzC,SAKG,IAAM2Q,EAAW,CAAC,CAACjU,KAAK,OAAQ8M,WAAW,SAAU6B,KAAKiT,GACrC,CAAC5hB,KAAK,QAAS8M,WAAW,UAAW6B,KAAK8S,GAC1C,CAACzhB,KAAK,SAAU8M,WAAW,UAAW6B,KAAKoT,GAC3C,CAAC/hB,KAAK,WAAY8M,WAAW,YAAa6B,KAAK0S","file":"static/js/main.f9032fbd.chunk.js","sourcesContent":["/*\nBryce Fujita\nParticipatory Factor Mapping Software\nWinter - Spring 2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nconst Colors = require('./color').Colors\n\nexport const NUM_LOOPS = 5\n\n    /** \n     * A function which takes in an 2D array of NxN integers\n     * and converts it to an array of objects which holds the integer\n     * as well as the x,y coordinance in the array for JSX state.\n     * \n     * @param {*} theArray \n     *                  an orderded 2D array of real numbers\n     *                       ex: [[0, 3, -1],\n     *                           [1, 0, -3],\n     *                           [0, 3,  0]]\n     *\n     * @returns a 2D array of objects that contain both data and location\n     * \n     *                       ex: [[{data:0,x:0,y:0}, {data:3,x:0,y:1}, {data:-1,x:0,y:2}],\n     *                           [[{data:1,x:1,y:0}, {data:0,x:1,y:1}, {data:-3,x:1,y:2}],\n     *                           [[{data:0,x:2,y:0}, {data:3,x:2,y:1}, {data:0,x:2,y:2}]\n     */\nexport function Objectify(theArray) {\n    let returnMe = []\n    for(let i = 0; i < theArray.length; i++) {\n        let innerArray = []\n        for(let j = 0; j < theArray[0].length; j++) {\n            innerArray.push({\n                data: parseInt(theArray[i][j]),\n                x: i,\n                y: j,\n            })\n        }\n        returnMe.push(innerArray)\n    }\n    return returnMe\n}\n\nexport function deepCopy(the2DArray) {\n    let result = []\n    for(let i = 0; i < the2DArray.length; i++) {\n        let innerArray = []\n        for(let j = 0; j < the2DArray[0].length; j++) {\n            innerArray[j] = the2DArray[i][j]\n        }\n        result.push(innerArray)\n    }\n    return result\n}\n\nexport function buildUnweightedAdjacency(theWeightedArray) {\n    let result = []\n    for(let i = 0; i < theWeightedArray.length; i++) {\n        let innerArray = []\n        for(let j = 0; j < theWeightedArray[0].length; j++) {\n            innerArray[j] = (theWeightedArray[i][j] > 0 ? 1 : theWeightedArray[i][j] < 0 ? -1 : 0)\n        }\n        result.push(innerArray)\n    }\n    return result\n}\n\n/**\n * A function which strips the 2D array of Objects\n * of their location and returns a 2D array of just\n * their data.\n * @param {*} theArray\n *                      a 2D array of objects that contain both data and location\n*                           ex: [[{data:0,x:0,y:0}, {data:3,x:0,y:1}, {data:-1,x:0,y:2}],\n*                           [[{data:1,x:1,y:0}, {data:0,x:1,y:1}, {data:-3,x:1,y:2}],\n*                           [[{data:0,x:2,y:0}, {data:3,x:2,y:1}, {data:0,x:2,y:2}]\n* \n* @returns  a 2D array of only the data\n*                       ex: [[0, 3, -1],\n*                           [1, 0, -3],\n*                           [0, 3,  0]]\n*/\nexport function getNums(theArray) {\n    let returnMe = []\n    for(let i = 0; i < theArray.length; i++) {\n        let innerArray = []\n        for(let j = 0; j < theArray[0].length; j++) {\n            innerArray.push(parseInt(theArray[i][j].data))\n        }\n        returnMe.push(innerArray)\n    }\n    return returnMe\n}\n\n\n\n/**\n * A function which packages factors, influence map, and\n * dependence map into a single array of objects that include one\n * data point for Chart data visualization.\n * \n * @param {*} theFactors \n *                  an ordered 1D array of \"factor names\" representing Vertices the Graph. The order of \n *                  the \"factor names\" in the array correspond with order of Vertices original adjacency matrix  \n *                      ex: ['A', 'B', 'C', 'D', 'E'] \n * @param {*} theInf \n *                  a map of all the factors paired with their normalized influence value\n * \n * @param {*} theDep \n *                  a map of all the factors paired with their normalized dependency value\n * \n * @param {*} theColor\n *                  a color used for the graph to display each data point\n * \n * @returns an array of objects formatted for Recharts graph with following key:value pairs:\n *                  [{\n *                  name: displays name of Factor on graph\n *                  inf: influence value used to graph on Y coordinates of graph\n *                  dep: dependence value used to graph on X coordinates of graph\n *                  color: color used to color plot point\n *                  }, ...]\n */\n\nexport function setupInfluenceMap(theFactors, theInf, theDep, theColor) {\n\n    let returnMe = []\n    for(let i = 0; i < theFactors.length; i++) {\n        let inner =[]\n        inner.push({\n            name: theFactors[i],\n            inf: theInf.get(theFactors[i]),\n            dep: theDep.get(theFactors[i]),\n            color: theColor\n        })\n        returnMe.push(inner)\n    }\n    return returnMe\n}\n\n/**\n * A function which packages factors, influence map, and\n * dependence map into a 2D array of objects that include two\n * data points for Chart data visualization.\n * \n * @param {*} theFactors \n *                  an ordered 1D array of \"factor names\" representing Vertices the Graph. The order of \n *                  the \"factor names\" in the array correspond with order of Vertices original adjacency matrix  \n*                      ex: ['A', 'B', 'C', 'D', 'E'] \n* @param {*} theInf \n*                  a map of all the factors paired with their normalized influence value\n*                  of the direct data\n* \n* @param {*} theDep \n*                  a map of all the factors paired with their normalized dependency value\n*                  of the direct data\n* \n* @param {*} theIteInf \n*                  a map of all the factors paired with their normalized influence value\n*                  of the indirect data\n* \n* @param {*} theIteDep \n*                  a map of all the factors paired with their normalized dependency value\n*                  of the indirect data\n* \n* \n* @returns an array of objects formatted for Recharts graph with following key:value pairs:\n*                  [[{\n*                  name: displays name of Factor on graph\n*                  inf: influence value of direct data used to graph on Y coordinates of graph\n*                  dep: dependence value of direct data used to graph on X coordinates of graph\n*                  color: primary color used for first point\n*                  },\n*                  name: no name used for second point\n*                  inf: influence value of indirect data used to graph on Y coordinates of graph\n*                  dep: dependence value of indirect data used to graph on X coordinates of graph\n*                  color: secondary color used for second point], ... ]\n*/\nexport function setupTotalInfluenceMap(theFactors, theInf, theDep, theIteInf, theIteDep) {\n    let returnMe = []\n    for(let i = 0; i < theFactors.length; i++) {\n        let inner =[]\n        inner.push({\n            name: theFactors[i],\n            inf: theInf.get(theFactors[i]),\n            dep: theDep.get(theFactors[i]),\n            color: Colors.PRIMARY\n        })\n        inner.push({\n            name: '',\n            inf: theIteInf.get(theFactors[i]),\n            dep: theIteDep.get(theFactors[i]),\n            color: Colors.SECONDARY \n        })\n        returnMe.push(inner)\n    }\n    return returnMe\n}\n\n/**\n * Function used to take in all the loops, factors, and matrix to build into a format that react-force-graph component\n * can use an argument and build properly.\n * \n * @param {*} theLoops \n *                  a list of an ordered 1D array of \"factor names\" representing Vertices in the loop. The order of \n *                  the \"factor names\" in the array correspond with order of Vertices in the loop.  \n *                      ex: [['A', 'C', 'D'], ['A', 'C'], ...] \n * \n * @param {*} theFactors \n *                  an ordered 1D array of \"factor names\" representing Vertices the Graph. The order of \n *                  the \"factor names\" in the array correspond with order of Vertices original adjacency matrix  \n *                      ex: ['A', 'B', 'C', 'D', 'E'] \n * \n * @param {*} theArray \n *                  an orderded 2D array of real numbers with each number representing a weighted edge\n *                  that corresponds to a vertice pointing to another vertice. \n *                      ex: [[0, 3, -1],\n *                          [1, 0, -3],\n *                          [0, 3,  0]]\n * \n * @returns an object with a list of all the nodes (Each vertice) and a list of all the links (each edge)\n *                      ex: {\n *                          nodes: ['A', 'B', 'C']\n *                          links: [{\n *                              source: 'A',\n *                              target: 'B',\n *                              value : 3\n *                              color : Colors.BLUE\n *                          }, ...]\n *                          }\n */\n\nexport function setupD3(theLoops, theFactors, theArray){\n    let loops = theLoops.slice()\n    loops.length = (loops.length > NUM_LOOPS) ? NUM_LOOPS : loops.length\n    let nodes = []\n    let Obnodes = []\n    let links = []\n    \n    //Iterate through loops and add unseen vertice\n    for(let i = 0; i < loops.length; i++) {\n        loops[i].loop.forEach((element) => {\n            if(!nodes.includes(element)){\n                nodes.push(element)\n            }\n        })\n    }\n\n    //Converts nodes to object nodes to be used by force graph\n    for(let i = 0; i < nodes.length; i++) {\n        Obnodes.push({\n            id: nodes[i],\n            name: nodes[i],\n            value: 1\n        })\n    }\n\n    //Add links associated by nodes\n\n    let max = 0\n    let min = 0\n\n    for(let i = 0; i <= loops.length-1; i++) {\n        let loop = loops[i].loop\n        for(let j = 0; j < loop.length; j++) {\n            const next = (j + 1)%loop.length\n            const start = loop[j]\n            const end = loop[next]\n            const value = theArray[theFactors.indexOf(start)][theFactors.indexOf(end)]\n            const color = (value < 0) ? Colors.RED : Colors.BLUE\n            if (Math.abs(value) > max) max = value\n            if (Math.abs(value) < min) min = value\n            if(value !== 0){\n                links.push({\n                    source: loop[j],\n                    target: loop[next],\n                    value: value,\n                    color: color,\n                    sign: value,\n                })\n            }\n        }\n    }\n\n    //Normalize points\n    links.forEach((element) => element.value = ((Math.abs(element.value)-min)/((max-min)*0.25)) + 1)\n    return {\n        nodes: Obnodes,\n        links: links\n    }\n}\n\nexport function setupD3HighLights(theLoops, theIndex) {\n    let loops = theLoops.slice()\n    loops.length = (loops.length > NUM_LOOPS) ? NUM_LOOPS : loops.length\n    let nodes = new Set()\n    let links = new Set()\n\n    let loop = loops[theIndex].loop\n    for(let i = 0; i < loop.length; i++) {\n        const next = (i + 1)%loop.length\n        const start = loop[i]\n        const end = loop[next]\n        nodes.add(start)\n        links.add(start+end)\n    }\n\n    return {\n        nodes: nodes,\n        links: links\n    }\n}\n\n/**\n * Function used to estimate the total complexity of the feedback loop analysis\n * \n * @param {*} theFactors\n *                  an ordered 1D array of \"factor names\" representing Vertices the Graph. The order of \n *                  the \"factor names\" in the array correspond with order of Vertices original adjacency matrix  \n *                      ex: ['A', 'B', 'C', 'D', 'E'] \n * \n * @param {*} theLength \n *                  the max length of the loops\n * \n * @param {*} thePerc\n *                  the percentage of all the edges used\n * \n * @returns the number of posible loops that can be found.  Used to estimate how long an analysis may take\n */\nexport function getComplexity(numFactors, theLength, thePerc){\n    let length = theLength > numFactors ? numFactors : theLength\n    let returnMe = 1\n    for(let i = length-2; i >= 0; i--) {\n        returnMe *= ((numFactors-i)*thePerc)\n    }\n    return parseInt(returnMe)\n}\n\n/**\n * Function used to calculate how many times a factor appears in all of the loops\n * \n * @param {*} theLoops \n *                      a list of an ordered 1D array of \"factor names\" representing Vertices in the loop. The order of \n *                      the \"factor names\" in the array correspond with order of Vertices in the loop.  \n *                      ex: [['A', 'C', 'D'], ['A', 'C'], ...]  \n * @returns \n */\nexport function getFrequency(theLoops){\n    let freq = new Map()\n    theLoops.forEach((element) => {\n        element.loop.forEach((factor) => {\n            if (freq.has(factor)) {\n                freq.set(factor, freq.get(factor) + 1)\n            } else {\n                freq.set(factor, 1)\n            }\n        })\n    })\n    const returnMe = new Map([...freq.entries()].sort((a,b) => b[1] - a[1]))\n    return returnMe\n}\n\nexport function calculateConnectedPercentage(adjacency) {\n    const vCount = adjacency.length\n    const edgeCount = [].concat(...adjacency).filter(e => e !== 0).length\n\n    return  edgeCount / ((vCount * vCount) - vCount)\n}\n","import {influence, dependence, calculateCentralityVectors, iterate, loadArray} from 'pfms'\n\nlet { deepCopy, buildUnweightedAdjacency, calculateConnectedPercentage }  = require('./utils')\n\n\n//Template describes the Project object t\nexport const EMPTY_PROJECT = {\n    projectName: undefined, // String represents the project name\n    projectVersion: 1.1,\n    factorNames: undefined, // [{longFactorName:String, shortFactorName: String}]\n    editArrayObj: undefined, // \n    originalMatrix: undefined, // [num][num] represents the original starting matrix\n    \n    // Graph object stores calculated graph information\n    graph: {\n        unweightedAdjacency: undefined, // [num][num] 0/(-)1 matrix to unweighted graph based on the Direct matrix\n        percentageConnected: undefined, // num 0-1 as the percent connected of the directed graph \n        //needs sinks, sources, other graph info. \n    },\n    \n    direct:{\n        matrix: undefined, // [num][num] 2D \"weighted\" \"directed\" adjacency matrix\n        influence: undefined,\n        dependence: undefined,\n        eigenScores: undefined,\n        rankMap: undefined, // map(shortFactorName, {influence:N, dependence:M, leftEigen:O, rightEigen:P, })\n    },\n    indirect:{\n        matrix: undefined, // [num][num] 2D \"weighted\" \"directed\" adjacency matrix\n        influence: undefined,\n        dependence: undefined,\n        eigenScores: undefined,\n        indirectN: undefined, // num the number of times the direct matrix is multiplied by itself to obtain indirect \n    },\n    feedbackLoops:{\n        options:{\n            loopLength: undefined,\n            factor: undefined,\n            weightAlgorithm: undefined,\n            loopCount: undefined,\n            loopWeight: undefined, //which matrix weights to use Direct or Indirect. NOTE: This does NOT take consider if the indirectN changes...needs to fix this for \"saves\"\n            isAnalyzing: undefined,\n            currentLoop: undefined,\n        },\n        foundLoops: [\n            // {\n            //     loops: undefined,\n            //     loopLength: undefined,\n            //     factor: undefined,\n            //     weightAlgorithm: undefined,\n            //     loopWeight: undefined, //which matrix weights to use Direct or Indirect. NOTE: This does NOT take consider if the indirectN changes...needs to fix this for \"saves\"\n            // }\n        ]\n    }\n}\n\nexport function loadProjectFromPmf(project) {\n        //parsed file: {factors: [String], array: [num][num]}\n    // factors: array of factor names\n    // array: 2D \"weighted\" \"directional\" adjacency matrix\n\n    const longNames = project.factorNames.map(nameObj => nameObj.longFactorName)\n\n    const adjacency = buildUnweightedAdjacency(project.direct.matrix)\n\n\n\n    const directInfluence = influence(project.direct.matrix, longNames)\n    const directDependence = dependence(project.direct.matrix, longNames)\n    const directEigenScores = calculateCentralityVectors(project.direct.matrix)\n\n    const directRanks =  buildRankMap(project.factorNames, directInfluence, directDependence, directEigenScores)\n\n    const indirect = iterate(project.direct.matrix, project.indirect.indirectN)\n\n    const indirectInfluence = influence(indirect, longNames)\n    const indirectDependence = dependence(indirect, longNames)\n    const indirectEigenScores = calculateCentralityVectors(indirect)\n\n    const indirectRanks =  buildRankMap(project.factorNames, indirectInfluence, indirectDependence, indirectEigenScores)\n\n    return { \n        projectName: project.projectName,\n        factorNames: project.factorNames, // [{longFactorName, shortFactorName}]\n        editArrayObj: deepCopy(project.direct.matrix),\n        originalMatrix: project.originalMatrix,\n        // TODO package Graph info together adjacency % connected etc...\n        graph: {\n            unweightedAdjacency: adjacency,\n            percentageConnected: calculateConnectedPercentage(adjacency),\n        },\n        direct:{\n            matrix: project.direct.matrix, // [num][num] 2D \"weighted\" \"directional\" adjacency matrix\n            influence: directInfluence,\n            dependence: directDependence,\n            eigenScores: directEigenScores,\n            rankMap: directRanks,\n        },\n        indirect:{\n            matrix: indirect, // [num][num] 2D \"weighted\" \"directional\" adjacency matrix\n            influence: indirectInfluence,\n            dependence: indirectDependence,\n            eigenScores: indirectEigenScores,\n            rankMap: indirectRanks,\n            indirectN: project.indirect.indirectN,\n        },\n        feedbackLoops:{\n            options:{\n                loopLength: project.feedbackLoops.options.loopLength,\n                factor: project.feedbackLoops.options.factor,\n                weightAlgorithm: project.feedbackLoops.options.weightAlgorithm,\n                loopCount: project.feedbackLoops.options.loopCount,\n                isAnalyzing: false,\n                loopWeight: project.feedbackLoops.options.loopWeight,\n                currentLoop: project.feedbackLoops.options.currentLoop,\n            },\n            foundLoops: project.feedbackLoops.foundLoops,\n        }\n    }\n}\n\n// TODO: This function requires refactoring!!!\nexport function loadProjectFromCSV(fileText) {\n    //parsed file: {factors: [String], array: [num][num]}\n    // factors: array of factor names\n    // array: 2D \"weighted\" \"directional\" adjacency matrix\n    const parsedFile = JSON.parse(loadArray(fileText))\n\n    //note: works for Latin and Greek based languages, not Chinese Japanese etc...\n    const isAlpha = (char) => char.toLowerCase() !== char.toUpperCase()\n    const isWhiteSpace = (char) => char === ' '\n\n    const toFactorObj = (long) => {\n        return {\"longFactorName\":long, \"shortFactorName\":toShortName(long)}\n    }\n\n    let toShortName = (longName) => {\n        longName = longName.trim()\n        if (longName.length < 3) {\n            //edge case for very short \"long\" names\n            return longName.toUpperCase()\n        }\n\n        let alphaWhiteSpaceOnly = Array.prototype.filter.call(longName, c => isWhiteSpace(c) || isAlpha(c))\n                .join('')\n                .split(' ')\n                .filter(word => word !== '' && word.length > 3)\n    \n        if (alphaWhiteSpaceOnly.length === 1) {\n            return alphaWhiteSpaceOnly[0].substring(0, 3).toUpperCase()\n        } else  if (alphaWhiteSpaceOnly.length === 2) {\n            return alphaWhiteSpaceOnly[0].substring(0, 2).toUpperCase() +\n                    alphaWhiteSpaceOnly[1].substring(0, 1).toUpperCase()\n        } else {\n            return alphaWhiteSpaceOnly[0].substring(0, 1).toUpperCase() +\n                    alphaWhiteSpaceOnly[1].substring(0, 1).toUpperCase() +\n                    alphaWhiteSpaceOnly[2].substring(0, 1).toUpperCase()\n        }\n    }\n\n    const genFrequencyTable = (factorNameObjects) => {\n        let frequency = new Map()\n    \n        factorNameObjects.map(name => {\n            frequency.has(name.shortFactorName) ?\n                frequency.set(name.shortFactorName, frequency.get(name.shortFactorName) + 1) :\n                frequency.set(name.shortFactorName, 1)\n                return undefined\n        })\n        return frequency\n    }\n    \n\n    //Ugly side-effecting function\n    function adjustShortNames(factorNameObject) {\n        let frequency = genFrequencyTable(factorNameObject)\n        Array.from(frequency)\n            .filter(([key, value]) => value > 1)\n            .map(([name, count]) => name)\n            .forEach(shortname => {\n                let count = 1\n                factorNameObject\n                    .filter(nameObj => nameObj.shortFactorName === shortname)\n                    .forEach(nameObj => nameObj.shortFactorName = nameObj.shortFactorName + count++)\n            })\n    }\n\n    const factorNames = parsedFile.factors.map(e => e.substring(0, 3).toUpperCase())\n                        .map((e, i) => {return toFactorObj(parsedFile.factors[i], e)}) \n\n    adjustShortNames(factorNames)\n\n    const adjacency = buildUnweightedAdjacency(parsedFile.array)\n    const longNames = factorNames.map(nameObj => nameObj.longFactorName)\n    const directInfluence = influence(parsedFile.array, longNames)\n    const directDependence = dependence(parsedFile.array, longNames)\n    const directEigenScores = calculateCentralityVectors(parsedFile.array)\n\n    const directRanks =  buildRankMap(factorNames, directInfluence, directDependence, directEigenScores)\n\n    return { \n        projectName: \"defualt\",\n        factorNames: factorNames, // [{longFactorName, shortFactorName}]\n        editArrayObj: deepCopy(parsedFile.array),\n        originalMatrix: deepCopy(parsedFile.array),\n        // TODO package Graph info together adjacency % connected etc...\n        graph: {\n            unweightedAdjacency: adjacency,\n            percentageConnected: calculateConnectedPercentage(adjacency),\n        },\n        direct:{\n            matrix: parsedFile.array, // [num][num] 2D \"weighted\" \"directional\" adjacency matrix\n            influence: directInfluence,\n            dependence: directDependence,\n            eigenScores: directEigenScores,\n            rankMap: directRanks,\n        },\n        indirect:{\n            matrix: parsedFile.array, // [num][num] 2D \"weighted\" \"directional\" adjacency matrix\n            influence: directInfluence,\n            dependence: directDependence,\n            eigenScores: directEigenScores,\n            rankMap: directRanks,\n            indirectN: 0,\n        },\n        feedbackLoops:{\n            options:{\n                loopLength: 2,\n                factor: factorNames[0].shortFactorName,\n                weightAlgorithm: \"Average Strength\",\n                loopCount: 10,\n                isAnalyzing: false,\n                loopWeight: \"Direct Matrix\",\n                currentLoop: undefined,\n            },\n            foundLoops:[]\n        }\n    }\n}\n\nexport function minifyProject(project) {\n    return {\n        projectName: project.projectName, // String represents the project name\n        projectVersion: project.projectVersion,\n        factorNames: project.factorNames, // [{longFactorName:String, shortFactorName: String}]\n        originalMatrix: project.originalMatrix, // [num][num] represents the original starting matrix\n        direct:{\n            matrix: project.direct.matrix, // [num][num] 2D \"weighted\" \"directed\" adjacency matrix\n        },\n        indirect:{\n            indirectN: project.indirect.indirectN, // num the number of times the direct matrix is multiplied by itself to obtain indirect \n        },\n        feedbackLoops:{\n            options:{\n                loopLength: project.feedbackLoops.options.loopLength,\n                factor: project.feedbackLoops.options.factor,\n                weightAlgorithm: project.feedbackLoops.options.weightAlgorithm,\n                loopCount: project.feedbackLoops.options.loopCount,\n                loopWeight: project.feedbackLoops.options.loopWeight, //which matrix weights to use Direct or Indirect. NOTE: This does NOT take consider if the indirectN changes...needs to fix this for \"saves\"\n                currentLoop: project.feedbackLoops.options.currentLoop,\n            },\n            foundLoops: project.feedbackLoops.foundLoops,\n        }\n    }\n}\n\n\n\nexport function setDirectMatrix(matrix) {\n    return (previousState) => {\n\n        const longNames = previousState.factorNames.map(namePair => namePair.longFactorName)\n        const altered = matrix\n        const indirectAltered = iterate(altered, previousState.indirect.indirectN)\n        const adjacency = buildUnweightedAdjacency(altered)\n\n        const directInfluence = influence(altered, longNames)\n        const directDependence = dependence(altered, longNames)\n        const directEigenScores = calculateCentralityVectors(altered)\n    \n        const directRanks =  buildRankMap(previousState.factorNames, directInfluence, directDependence, directEigenScores)\n\n        const indirectInfluence = influence(indirectAltered, longNames)\n        const indirectDependence = dependence(indirectAltered, longNames)\n        const indirectEigenScores = calculateCentralityVectors(indirectAltered)\n    \n        const indirectRanks =  buildRankMap(previousState.factorNames, indirectInfluence, indirectDependence, indirectEigenScores)\n\n        return { ...previousState, \n            editArrayObj: deepCopy(altered),\n            graph: {\n                unweightedAdjacency:  adjacency,\n                percentageConnected: calculateConnectedPercentage(adjacency),\n            },\n            direct: {\n                matrix: altered,\n                influence: directInfluence,\n                dependence: directDependence,\n                eigenScores: directEigenScores,\n                rankMap: directRanks,\n            },\n            indirect: {\n                matrix: indirectAltered,\n                indirectN: previousState.indirect.indirectN,\n                influence: indirectInfluence,\n                dependence: indirectDependence,\n                eigenScores: indirectEigenScores,\n                rankMap: indirectRanks,\n            }\n        }\n    }\n}\n\nexport function setIndirectMatrixByIterations(n) {\n    return (previousState) => {\n        const newArray = iterate(previousState.direct.matrix, n)\n        const longNames = previousState.factorNames.map(namePair => namePair.longFactorName)\n\n        const indirectInfluence = influence(newArray, longNames)\n        const indirectDependence = dependence(newArray, longNames)\n        const indirectEigenScores = calculateCentralityVectors(newArray)\n    \n        const indirectRanks =  buildRankMap(previousState.factorNames, indirectInfluence, indirectDependence, indirectEigenScores)\n\n        return { ...previousState, \n            indirect: {\n                matrix: newArray,\n                indirectN: n,\n                influence: indirectInfluence,\n                dependence: indirectDependence,\n                eigenScores: indirectEigenScores,\n                rankMap: indirectRanks,\n            }\n        }\n    }\n}\n\n\nexport function setMaxLoopLength(length) {\n    return (previousState) => {\n            return {    ...previousState, \n                        feedbackLoops: {\n                            options:{\n                                loopLength: length,\n                                factor: previousState.feedbackLoops.options.factor,\n                                weightAlgorithm: previousState.feedbackLoops.options.weightAlgorithm,\n                                loopCount: previousState.feedbackLoops.options.loopCount,\n                                isAnalyzing: previousState.feedbackLoops.options.isAnalyzing,\n                                loopWeight: previousState.feedbackLoops.options.loopWeight,\n                                currentLoop: previousState.feedbackLoops.options.currentLoop,\n                            },\n                            foundLoops:previousState.feedbackLoops.foundLoops,\n                        }\n                    }\n                }\n}\n\nexport function setMaxLoopCount(count) {\n    return (previousState) => {\n        return {    ...previousState, \n                    feedbackLoops: {\n                        options:{\n                            loopLength: previousState.feedbackLoops.options.loopLength,\n                            factor: previousState.feedbackLoops.options.factor,\n                            weightAlgorithm: previousState.feedbackLoops.options.weightAlgorithm,\n                            loopCount: count,\n                            isAnalyzing: previousState.feedbackLoops.options.isAnalyzing,\n                            loopWeight: previousState.feedbackLoops.options.loopWeight,\n                            currentLoop: previousState.feedbackLoops.options.currentLoop,\n                        },\n                        foundLoops:previousState.feedbackLoops.foundLoops,\n                    }\n                }\n            }\n}    \n\nexport function setLoopFactor(factor) {\n    return (previousState) => {\n        return {    ...previousState, \n                    feedbackLoops: {\n                        options:{\n                            loopLength: previousState.feedbackLoops.options.loopLength,\n                            factor: factor,\n                            weightAlgorithm: previousState.feedbackLoops.options.weightAlgorithm,\n                            loopCount: previousState.feedbackLoops.options.loopCount,\n                            isAnalyzing: previousState.feedbackLoops.options.isAnalyzing,\n                            loopWeight: previousState.feedbackLoops.options.loopWeight,\n                            currentLoop: previousState.feedbackLoops.options.currentLoop,\n                        },\n                        foundLoops:previousState.feedbackLoops.foundLoops,\n                    }\n                }\n            }\n}\n\nexport function setLoopAlgorithm(algorithm) {\n    return (previousState) => {\n        return {    ...previousState, \n                    feedbackLoops: {\n                        options:{\n                            loopLength: previousState.feedbackLoops.options.loopLength,\n                            factor: previousState.feedbackLoops.options.factor,\n                            weightAlgorithm: algorithm,\n                            loopCount: previousState.feedbackLoops.options.loopCount,\n                            isAnalyzing: previousState.feedbackLoops.options.isAnalyzing,\n                            loopWeight: previousState.feedbackLoops.options.loopWeight,\n                            currentLoop: previousState.feedbackLoops.options.currentLoop,\n                        },\n                        foundLoops:previousState.feedbackLoops.foundLoops,\n                    }\n                }\n            }\n}\n\nexport function setLoopsAnalyzing(isAnalyzing) {\n    return (previousState) => {\n        return {    ...previousState, \n                    feedbackLoops: {\n                        options:{\n                            loopLength: previousState.feedbackLoops.options.loopLength,\n                            factor: previousState.feedbackLoops.options.factor,\n                            weightAlgorithm: previousState.feedbackLoops.options.weightAlgorithm,\n                            loopCount: previousState.feedbackLoops.options.loopCount,\n                            isAnalyzing: isAnalyzing,\n                            loopWeight: previousState.feedbackLoops.options.loopWeight,\n                            currentLoop: previousState.feedbackLoops.options.currentLoop,\n                        },\n                        foundLoops:previousState.feedbackLoops.foundLoops,\n                    }\n                }\n            }\n}\n\nexport function setLoopsWeight(weight) {\n    return (previousState) => {\n        return {    ...previousState, \n                    feedbackLoops: {\n                        options:{\n                            loopLength: previousState.feedbackLoops.options.loopLength,\n                            factor: previousState.feedbackLoops.options.factor,\n                            weightAlgorithm: previousState.feedbackLoops.options.weightAlgorithm,\n                            loopCount: previousState.feedbackLoops.options.loopCount,\n                            isAnalyzing: previousState.feedbackLoops.options.isAnalyzing,\n                            loopWeight: weight,\n                            currentLoop: previousState.feedbackLoops.options.currentLoop,\n                        },\n                        foundLoops:previousState.feedbackLoops.foundLoops,\n                    }\n                }\n            }\n}\n\nexport function setCurrentLoop(index) {\n    return (previousState) => {\n        return {    ...previousState, \n                    feedbackLoops: {\n                        options:{\n                            loopLength: previousState.feedbackLoops.options.loopLength,\n                            factor: previousState.feedbackLoops.options.factor,\n                            weightAlgorithm: previousState.feedbackLoops.options.weightAlgorithm,\n                            loopCount: previousState.feedbackLoops.options.loopCount,\n                            isAnalyzing: previousState.feedbackLoops.options.isAnalyzing,\n                            loopWeight: previousState.feedbackLoops.options.loopWeight,\n                            currentLoop: index,\n                        },\n                        foundLoops:previousState.feedbackLoops.foundLoops,\n                    }\n                }\n            }\n}\n\nexport function setLoopsResult(loops) {\n    return (previousState) => {\n\n        previousState.feedbackLoops.foundLoops.push({\n                    loops: loops,\n                    loopLength: previousState.feedbackLoops.options.loopLength,\n                    factor: previousState.feedbackLoops.options.factor,\n                    weightAlgorithm: previousState.feedbackLoops.options.weightAlgorithm,\n                    loopWeight: previousState.feedbackLoops.options.loopWeight,\n                     \n        })\n\n        return {    ...previousState, \n                    feedbackLoops: {\n                        options:{\n                            loopLength: previousState.feedbackLoops.options.loopLength,\n                            factor: previousState.feedbackLoops.options.factor,\n                            weightAlgorithm: previousState.feedbackLoops.options.weightAlgorithm,\n                            loopCount: previousState.feedbackLoops.options.loopCount,\n                            isAnalyzing: false,\n                            loopWeight: previousState.feedbackLoops.options.loopWeight,\n                            currentLoop: previousState.feedbackLoops.foundLoops.length - 1,\n                        },\n                        foundLoops:previousState.feedbackLoops.foundLoops,\n                    }\n                }\n            }\n}\n\n\n/*****************************************************************\n * Internal helper functions\n */\n\nfunction buildRankMap(factorNames, influence, dependence, eigenScores) {\n    let leftScores = factorNames.map((obj, index) => {\n        return { name:obj.shortFactorName, score:eigenScores.pageRankCentrality[index]}\n    }).sort((a, b) => b.score - a.score)\n    let rightScores = factorNames.map((obj, index) => {\n        return { name:obj.shortFactorName, score:eigenScores.eigenvectorCentrality[index]}\n    }).sort((a, b) => b.score - a.score)\n    const iMap = new Map(factorNames.map((obj, index) => {\n        let influenceRank = Array.from(influence.keys()).indexOf(obj.longFactorName) + 1\n        let dependenceRank = Array.from(dependence.keys()).indexOf(obj.longFactorName) + 1\n        let rightEigenRank = rightScores.findIndex(element => element.name === obj.shortFactorName) + 1\n        let leftEigenRank = leftScores.findIndex(element => element.name === obj.shortFactorName) + 1\n        const info = {\n            influence: influenceRank,\n            dependence : dependenceRank,\n            rightEigen: rightEigenRank,\n            leftEigen: leftEigenRank,\n        }\n\n        return [obj.shortFactorName, info]\n    }),)\n    return iMap\n}\n\n","/*\nBryce Fujita\nParticipatory Factor Mapping Software\nWinter - Spring 2022\nTCSS 498\nProfessor: Charles Bryan\n\nNote: This component is just used as a container at the moment, compare this to hero section that should dynamically change later on.\n*/\n\n//Importing npm packages and react components\nimport React from 'react'\nimport '../input.css'\nimport { loadProjectFromCSV } from '../../resources/project'\n\nfunction InputFilePage (props) {\n\n    /**\n     * Function to load the file\n     * \n     * @param {} e the event\n     * \n     */\n    let showFile = async (e) => {\n        // clearMatrix()\n        console.log(e)\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n\n        let name = document.getElementById('fileInput2').files.item(0).name.split('.')\n        let extension = name[name.length - 1]\n\n        if(extension === \"csv\") {\n            props.setProject(loadProjectFromCSV(e.target.result))\n            props.setLoaded(true)\n            props.setNav() //callback telling the parent to set the navigation as needed\n        }\n    }\n\n    reader.readAsText(e.target.files[0])\n}\n\n    // Below is all of the HTML/JSX used to actually draw out the component\n    return (\n    <div className='container'>\n        <h1>Enter a file</h1>\n        <input type=\"file\" id=\"fileInput2\" onChange = {(e) => showFile(e)} accept='.csv, .pmf'/>\n    </div>\n)}\n\nexport default InputFilePage\n","import React from \"react\"\n\nimport { OverlayTrigger, Popover } from 'react-bootstrap'\n\nfunction FactorInfoOverlay(props) {\n\n    return  <OverlayTrigger \n                placement={props.placement} \n                key={`ot-th-${props.placement}-${props.shortFactorName}`}\n                overlay={\n                <Popover id=\"popover-basic\" key={`po-th-${props.placement}-${props.shortFactorName}`}>\n                    <Popover.Header as=\"h3\" className={`bg-${props.colorClass} text-white`} key={`po-hd-th-${props.placement}-${props.shortFactorName}`}>\n                        <i className=\"bi bi-hammer\" style={{paddingRight:\"1em\"}}/>{props.longFactorName}\n                    </Popover.Header>\n                    <Popover.Body className={`text-${props.colorClass}`} key={`po-bd-th-${props.placement}-${props.shortFactorName}`}>\n                        <h3>{props.longFactorName} ({props.shortFactorName})</h3>\n                        <hr />\n                        <i className=\"bi bi-layout-text-sidebar\" style={{paddingRight:\".5em\"}}/>Right Eigenvector: {props.info.rightEigen} out of {props.factorCount}\n                        <br />\n                        <i className=\"bi bi-layout-text-sidebar-reverse\" style={{paddingRight:\".5em\"}}/>Left Eigenvector: {props.info.leftEigen} out of {props.factorCount}\n                        <hr />\n                        <i className=\"bi bi-bar-chart-steps\" style={{paddingRight:\".5em\"}}/>Influence Rank: {props.info.influence} out of {props.factorCount}\n                        <br />\n                        <i className=\"bi bi-bar-chart-line-fill\" style={{paddingRight:\".5em\"}}/>Dependence Rank: {props.info.dependence}  out of {props.factorCount}\n                    </Popover.Body>\n                </Popover> }>\n                {props.element}\n            </OverlayTrigger>\n}\n\nexport default FactorInfoOverlay","/*\nBryce Fujita\nParticipatory Factor Mapping Software\nWinter - Spring2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nimport React from \"react\"\n\nimport { OverlayTrigger, Popover } from 'react-bootstrap'\n\nimport FactorInfoOverlay from \"./FactorInfoOverlay\"\n\nimport './input.css'\n\nconst {calculateGradient, findMaxMin, hslToString, getComplement} = require('../resources/color.js')\n\nfunction Cell(props)  {\n\n    let bg = props.data >= 0 ? hslToString(props.color) : calculateGradient(props.color)\n\n    const STYLE = {\n        background: bg,\n        color: hslToString(getComplement(props.color))\n    }\n\n    // const NEGATIVE_STYLE = {\n    //     background: bg,\n    //     color: hslToString(getComplement(props.color)),\n    //     border: \"red solid 2px\"\n    // }\n\n    const DIAG_STYLE = {\n        background: \"black\",\n        color: \"white\"\n    }\n\n\n    return props.isDiag ?\n                <td style={DIAG_STYLE}\n                    className='lines'\n                    key={\"td:\" + props.start.shortFactorName + ' ' + props.end.shortFactorName}>\n                        {Math.abs(props.data)}\n                </td> \n            :\n                <OverlayTrigger\n                    placement={props.isTop ? \"bottom\" : \"top\"}\n                    key={`ot-cell: ${props.start.shortFactorName} + ${props.end.shortFactorName}`}\n                    overlay={\n                        <Popover id=\"popover-basic\">\n                            <Popover.Header style={ STYLE} as=\"h3\">{`${props.start.shortFactorName} → ${props.end.shortFactorName}`}</Popover.Header>\n                            <Popover.Body>\n                                {`${props.start.shortFactorName}: ${props.start.longFactorName}`}\n                                    <br />\n                                {`${props.end.shortFactorName}: ${props.end.longFactorName}`}\n                                    <br />\n                                <span style={{fontWeight: 'bold'}}>{`weight: ${props.data}`}</span>\n                            </Popover.Body>\n                        </Popover>\n                    }>\n                    <td style={ STYLE}\n                                className='lines'\n                                key={\"td:\" + props.start.shortFactorName + ' ' + props.end.shortFactorName}>\n                                    {Math.abs(props.data)}\n                            </td> \n                </OverlayTrigger>\n}\n\nfunction Matrix (props) {\n    \n    const factorHeaders = props.factors.map(data => {\n        const COL_HEAD_STYLE = {\n            paddingLeft: \"1em\",\n            paddingRight: \"1em\",\n            border:\"1px solid black\",\n        }\n        const element =  <th style={COL_HEAD_STYLE} key={`th-bottom-${data.shortFactorName}`}>\n                            {data.shortFactorName}\n                        </th>\n\n        return  <FactorInfoOverlay \n                    placement=\"bottom\"\n                    colorClass={props.heatmap.colorClass}\n                    shortFactorName={data.shortFactorName} \n                    longFactorName={data.longFactorName}\n                    info={props.matrix.rankMap.get(data.shortFactorName)} \n                    factorCount={props.factors.length} \n                    element={element} />\n    })\n\n    // Below is all of the HTML/JSX used to actually draw out the component\n    const td = props.factors.length === 0 ? <></> : <td key=\"empty table cell\"/>\n    const rows = []\n    let columns;\n    if (props.matrix.matrix.length !== 0) {\n        const maxmin = findMaxMin([].concat(...props.matrix.matrix), (e) => Math.abs(e))\n        columns =                    \n            <tr key={\"tr-top-row\"}>\n                {td}\n                { factorHeaders }\n            </tr>\n        for(let i = 0; i <props.factors.length; i++) {\n            const COL_HEAD_STYLE = {\n                paddingLeft: \"1em\",\n                paddingRight: \"1em\",\n                border:\"1px solid black\",\n            }\n            const element =  <th style={COL_HEAD_STYLE} key={`th-right-${props.factors[i].shortFactorName}`}>\n                                {props.factors[i].shortFactorName}\n                            </th>\n            rows.push(\n                <tr key={\"tr-row:\" + i}>\n                    <FactorInfoOverlay \n                        placement=\"right\"\n                        colorClass={props.heatmap.colorClass}\n                        shortFactorName={props.factors[i].shortFactorName} \n                        longFactorName={props.factors[i].longFactorName} \n                        info={props.matrix.rankMap.get(props.factors[i].shortFactorName)} \n                        factorCount={props.factors.length}\n                        element={element} />\n                    {props.matrix.matrix[i].map((element, j) => (\n                                   \n                        <Cell\n                            data={element}\n                            color={props.heatmap.func(Math.abs(element), maxmin.min, maxmin.max)} \n                            isDiag={i === j}\n                            start = {props.factors[i]}\n                            end = {props.factors[j]}\n                            isTop = {i < 3}\n                            key={`cell: ${i} + ${j}`} />\n\n                                        \n                ))}\n            </tr>\n            )\n        }\n        return (\n            <div>\n                <table className='lines'>\n                    <thead>\n                        {columns}\n                    </thead>\n                    <tbody>\n                        {rows}\n                    </tbody>\n                </table>\n            </div>\n        )\n    } else {\n        return <h1>No data!</h1>\n    }\n}\n\n\n\nexport default Matrix","\nimport React from \"react\"\n\nimport Matrix from \"../Matrix.js\"\n\nimport { setIndirectMatrixByIterations } from \"../../resources/project.js\"\n\nfunction IndirectPage(props) {\n\n    const handleSelectMenu = (e) => {\n        props.setProject(setIndirectMatrixByIterations(parseInt(e.target.value)))\n    } \n\n    const options = []\n    for(let i = 0; i <=6; i++) {\n        options[i] = (<option value={i} key={\"option-\" + i}>{i}</option>)\n    }\n\n    return  <div>\n                <div className=\"centered\">           \n                    <label>Number of Iterations: </label>\n                    <select id='iterator' name='iterator' defaultValue={props.project.indirect.indirectN} onChange={(e) => handleSelectMenu(e)}>\n                        {options}\n                    </select>\n                </div> \n                <br/> \n                <Matrix \n                    matrix={props.project.indirect}\n                    factors={props.project.factorNames} \n                    heatmap={props.settings.heatmap}/>\n            </div>\n\n\n}\n\nexport default IndirectPage","\nimport Matrix from \"../Matrix.js\"\nimport React from \"react\"\n\n\nfunction DirectPage(props) {\n    \n    return  <div>            \n                <Matrix \n                    matrix={props.project.direct}\n                    factors={props.project.factorNames} \n                    heatmap={props.settings.heatmap}/>\n            </div>\n\n\n}\n\nexport default DirectPage","/*\nBryce Fujita\nParticipatory Factor Mapping Software\nWinter - Spring 2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nimport React from \"react\"\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nfunction CentralityTable(props) {\n\n    let eigRows = []\n    eigRows.push(\n        <tr key={\"tr-top-row\"}>\n            <td key=\"td-factors-header\" className='lines'>Factors</td>\n            <OverlayTrigger\n                placement=\"top\"\n                key={\"ot-left-ev\"}\n                overlay={\n                    <Tooltip key={\"tt-left-ev\"}>\n                        𝐲𝐴=𝜆𝐲 , where 𝐲 is left eigenvector\n                    </Tooltip>\n                }>\n                <td key={\"td-left-ev\"} className='lines'>Left Eigenvector</td>\n            </OverlayTrigger>\n            <OverlayTrigger\n                placement=\"top\"\n                key={\"ot-right-ev\"}\n                overlay={\n                    <Tooltip key={\"tt-right-ev\"}>\n                        𝐴𝐱=𝜆𝐱, where 𝐱 is right eigenvector\n                    </Tooltip>\n                }>\n                <td key={\"td-right-ev\"} className='lines'>Right Eigenvector</td>\n            </OverlayTrigger>\n        </tr>\n    )\n\n    for(let i = 0; i < props.factors.length; i++) {\n        eigRows.push(\n            <tr key={\"tr-\" + i}>\n                    <OverlayTrigger\n                        placement=\"left\"\n                        key={\"ot-factor-name-\" + props.factors[i].shortFactorName }\n                        overlay={\n                            <Tooltip key={\"ot-factor-name-\" + props.factors[i].shortFactorName }>\n                                {props.factors[i].longFactorName}\n                            </Tooltip>\n                        }>\n                        <td className='lines' key= {\"td-factor-name-\" + props.factors[i].shortFactorName}>\n                            {props.factors[i].shortFactorName}\n                        </td>\n                    </OverlayTrigger>\n                <td className='lines' key= {\"td-factor-left-\" + props.factors[i].shortFactorName}>{props.eigs.pageRankCentrality[i].toFixed(4)}</td>\n                <td className='lines' key= {\"td-factor-right-\" + props.factors[i].shortFactorName}>{props.eigs.eigenvectorCentrality[i].toFixed(4)}</td>\n            </tr>\n        )\n    }\n\n    return <table className='lines'>\n                <thead>\n                    <tr>\n                        <td  className='lines' colSpan='3'>Centrality Scores : Eigenvalue {props.eigs.eigenvalue.toFixed(4)}</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {eigRows}\n                </tbody>\n            </table>\n    \n}\n\nexport default CentralityTable","\nimport CentralityTable from '../CentralityTable'\nimport React from \"react\"\n\n\nfunction CentralityPage(props) {\n\n    return  <div>            \n                <table className=\"centered\">\n                    <tbody>\n                        <tr>\n                            <td>\n                                <CentralityTable factors={props.project.factorNames} eigs={props.project.direct.eigenScores}/>\n                            </td>\n                            <td>\n                                <CentralityTable factors={props.project.factorNames} eigs={props.project.indirect.eigenScores}/>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n}\n\nexport default CentralityPage","import React from \"react\"\n\n\nfunction UnderConstructionPage(props) {\n\n    return  <div className=\"container\">            \n                <h1>Under Construction</h1>\n                <h2>{props.pagename}</h2>\n            </div>\n\n\n}\n\nexport default UnderConstructionPage","import React from \"react\"\n\n\nfunction HomePage(props) {\n\n    return  <div className=\"container\">            \n                <h1>Welcome to UWT-SET PFMS!</h1>\n                <h2>Click \"Project <i className=\"bi bi-arrow-right-short\"/> Load <i className=\"bi bi-arrow-right-short\"/> From File\" to get started!</h2>\n            </div>\n\n\n}\n\nexport default HomePage","/*\nBryce Fujita\nParticipatory Factor Mapping Software\nWinter - Spring 2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nimport React from \"react\"\nimport Table from 'react-bootstrap/Table';\n\n\nfunction InfluenceTable(props) {\n\n    let influenceTds = Array.from(props.inf).map(([key, value]) => \n        <td className='lines' key={\"td-inf-\" + key}>{`${key} : ${value}`}</td>)\n\n    let dependenceTds = Array.from(props.dep).map(([key, value]) => \n        <td className='lines' key={\"td-dep-\" + key}>{`${key} : ${value}`}</td>)\n\n    let rows = influenceTds.map((td, index) => (<tr key={\"tr-\" + index}>{td}{dependenceTds[index]}</tr>))\n\n    return <Table striped bordered hover>\n            <thead>\n                <tr key={\"tr-headers\"} >\n                    <th key={\"th-influence\"} >Influence</th>\n                    <th key={\"th-dependence\"} >Dependence</th>\n                </tr>\n            </thead>\n            <tbody>\n                {rows}\n            </tbody>\n        </Table>\n    \n}\n\nexport default InfluenceTable","/*\nBryce Fujita\nParticipatory Factor Mapping Software\nWinter - Spring 2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nimport React from 'react';\nimport {XAxis, YAxis, Scatter, ScatterChart, CartesianGrid, Tooltip, LabelList, Label, Cell, Legend} from 'recharts'\n\nlet Colors =  require('../resources/color').Colors\n\nclass Chart extends React.Component {\n    render= () => {\n        \n        /** Container used to help render legend */\n        let colors = [\n            {\n                name: 'Direct',\n                color: Colors.PRIMARY\n            },\n            {\n                name: 'Indirect',\n                color: Colors.SECONDARY\n            }\n        ]\n\n        //** Function used to render legend */\n        const renderLegend = (props) => {\n            return (\n              <ul>\n                {\n                    colors.map((element) => \n                    <li key={`item-${element.name}`} style={{color: element.color,\n                    width: '12.5%',\n                    margin: 'auto',\n                    fontSize: '25px'}}>\n                        <span style={{fontSize: '18px'}}>{element.name}</span></li>\n                    )}\n              </ul>\n            );\n          }\n        \n        /** Packages 'Scatters' or points together to make individual points or pairs\n         * Note only one Scatter will cause all the points to have lines connecting them preventing\n         * differentiation to be impossible so one scatter plot per factor.  If there are multiple \n         * points in a scatter plot, it will be colored based on color it is assigned in props.\n         * Note Documentation in 'utils.js' for setupTotalInfluenceMap for multiple points per factor\n         */\n        let scatters = []\n        for (let i = 0; i < this.props.data.length; i++) {\n        scatters.push(\n            <Scatter data={this.props.data[i]} line={{stroke: 'black', strokeWidth: 2}}>\n            {this.props.data[i].map( (entry, index) => {\n            return <Cell fill={entry.color}/>\n            })}\n            <LabelList dataKey=\"name\" position='bottom' fill = 'black' />\n        </Scatter>)\n        }\n        return (\n            <div className=\"Chart\" >\n                <ScatterChart width={1000} height={1000}\n                  style = {{display: 'flex',\n                    flexDirection:'column',\n                    alignItems: 'center',\n                    margin:'auto'}} >\n                    <CartesianGrid/>\n                    <Legend content={renderLegend}/>\n                    <XAxis type=\"number\" dataKey=\"dep\" name=\"dependence\" ticks={['0.5']}>\n                        <Label value = \"Dependence\" offset={0} position=\"insideBottom\"/>\n                    </XAxis>\n                    <YAxis type=\"number\"\n                        dataKey=\"inf\"\n                        name=\"influence\"\n                        label={{value: 'Influence', angle: -90, position: 'insideLeft'}}\n                        ticks={['0.5']}\n                      />\n                    <Tooltip animationEasing='ease-out'/>\n                    {scatters}\n                </ScatterChart>\n            </div>\n        )\n    }\n}\n\nexport default Chart","\nimport InfluenceTable from '../InfluenceTable'\nimport React, { useState,  } from \"react\"\nimport Chart from \"../Chart.js\"\nimport PFMS from \"pfms\"\nimport { Form}  from \"react-bootstrap\"\n\nimport \"../../styles/pages.css\"\n\n//Use local modules\nlet Colors = require('../../resources/color').Colors\nlet Utils = require('../../resources/utils')\n\nfunction InfluencePage(props) {\n\n    const [chartOption, setChartOption] = useState(1)\n\n    let data;\n\n    let factors = props.project.factorNames.map((factor) => factor.longFactorName) \n\n    //// Builds displacement graph ////\n    if(chartOption === 1) {\n        data = Utils.setupInfluenceMap(factors, //Sets data for direct matrix\n            PFMS.normalize(props.project.direct.influence), \n            PFMS.normalize(props.project.direct.dependence),\n            Colors.PRIMARY)\n    } else if (chartOption === 2) {\n        data = Utils.setupInfluenceMap(factors, //Sets data for indirect matrix\n            PFMS.normalize(props.project.indirect.influence),  \n            PFMS.normalize(props.project.indirect.dependence),\n            Colors.SECONDARY)\n    } else if (chartOption === 3) {\n        data = Utils.setupTotalInfluenceMap(factors, //Sets data for direct and indirect matrix \n            PFMS.normalize(props.project.direct.influence),\n            PFMS.normalize(props.project.direct.dependence),\n            PFMS.normalize(props.project.indirect.influence),\n            PFMS.normalize(props.project.indirect.dependence))\n    } else {\n        console.log(\" How TF am I here...? Empty!\")\n    }\n\n    // TODO Display both direct and indirect -or- toggle\n\n    return  <div className='container'>\n                <table className=\"centered\">\n                    <thead>\n                        <tr>\n                            <td>\n                                <InfluenceTable inf={props.project.direct.influence} dep={props.project.direct.dependence}/>\n                            </td>\n                            <td>\n                                <InfluenceTable inf={props.project.indirect.influence} dep={props.project.indirect.dependence}/>\n                            </td>\n                        </tr>\n                    </thead>\n                </table>  \n                <br />\n                <Form.Select aria-label=\"Default select example\" onChange={(opt) => {\n                    setChartOption(parseInt(opt.target.value))\n                }}>\n                    <option value=\"1\">Direct</option>\n                    <option value=\"2\">Indirect</option>\n                    <option value=\"3\">Both</option>\n                </Form.Select> \n                <br />\n                <Chart data={data} />\n                \n            </div>\n}\n\nexport default InfluencePage","import React from \"react\"\n\nimport {heatmaps} from \"../../resources/color.js\"\nimport \"../../styles/pages.css\"\nimport '../input.css'\nimport {ToggleButtonGroup, ToggleButton} from 'react-bootstrap'\n\nconst {hslToString, getComplement} = require('../../resources/color.js')\n\nfunction SettingsPage(props) {\n\n    const handleClick = (heatMapName) => {\n        let heatmap = heatmaps.filter(element => element.name === heatMapName)[0]\n        props.setSettings(previousState => {\n            return { ...previousState, \n                    \"heatmap\":heatmap,\n            }\n        })\n    }\n\n    const toggles = heatmaps.map(e => \n                <ToggleButton \n                    key={e.name} \n                    id={e.name} \n                    value={e.name} \n                    variant=\"outline-primary\"  \n                    onClick={(btn) => handleClick(e.name)}\n                >\n                    { e.name }\n                </ToggleButton>\n        )\n\n    return  <div className=\"container\">            \n                <br />\n                <label>Select the heatmap color: </label>{' '}\n                <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={props.settings.heatmap.name}>\n                    {toggles}\n                </ToggleButtonGroup>\n                <br />\n                <SampleTable heatmap={props.settings.heatmap} />\n            </div>\n\n\n}\n\nfunction SampleTable(props) {\n\n    let rows = []\n    for (let i = 61; i > 0; i = i - 10) {\n        let color = props.heatmap.func(i, 1, 61)\n        let style = {\n            background: hslToString(color),\n            color: hslToString(getComplement(color)),\n            width: \"5em\",\n        }\n        rows.push(<td key={`col:${i}`} style={style}>{props.heatmap.name}</td>)\n    }\n\n    let style = {\n        marginTop:\"1em\"\n    }\n\n    return <table className='lines' style={style}>\n        <tbody>\n            <tr>\n                {rows}\n            </tr>\n        </tbody>\n    </table>\n}\n \nexport default SettingsPage","\nimport Matrix from \"../Matrix.js\"\nimport InfluenceTable from \"../InfluenceTable.js\"\nimport CentralityTable from \"../CentralityTable.js\"\nimport React from \"react\"\n\nfunction AllPage(props) {\n\n\n    return  <div>\n                <InfluenceTable inf={props.project.direct.influence} dep={props.project.direct.dependence}/>\n                <CentralityTable factors={props.project.factorNames} eigs={props.project.direct.eigenScores}/>            \n                <Matrix \n                    project={props.project}\n                    array={props.project.direct.matrix} \n                    factors={props.project.factorNames} \n                    heatmap={props.settings.heatmap}/>\n                <Matrix \n                    project={props.project}\n                    array={props.project.indirect.matrix} \n                    factors={props.project.factorNames} \n                    heatmap={props.settings.heatmap}/>\n            </div>\n\n\n}\n\nexport default AllPage","/*\nBryce Fujita\nParticipatory Factor Mapping Software\nWinter - Spring2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nimport React from \"react\"\n\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport './input.css'\n\nconst {calculateGradient, findMaxMin, hslToString, getComplement} = require('../resources/color.js')\n\nfunction Cell(props)  {\n\n    let bg = props.data >= 0 ? hslToString(props.color) : calculateGradient(props.color)\n\n    const STYLE = {\n        background: bg,\n        color: hslToString(getComplement(props.color))\n    }\n\n    const DIAG_STYLE = {\n        background: \"black\",\n        color: \"white\"\n    }\n\n\n\n    if (props.x === props.y) {\n        return  <td style={ DIAG_STYLE }\n                    className='lines'\n                    key={\"td-\" + props.x + ' ' + props.y}>\n                        {Math.abs(props.data)}\n                </td> \n    }\n\n    const options = []\n    for(let i = -3; i <= 3; i++) {\n        options[i + 3] = (<option value={i} key={\"td-\"+ props.x + ' ' + props.y + \"-opt-\" + i}>{i}</option>)\n    }\n    \n    return <td className='lines'\n                key={\"td-\" + props.x + ' ' + props.y}\n                style={STYLE} >\n                <select id='iterator' name='iterator' defaultValue={props.data} onChange={props.onChange}>\n                    { options }\n                </select>\n            </td>\n}\n\nfunction EditableMatrix (props) {\n\n    const COL_HEAD_STYLE = {\n        paddingLeft: \"1em\",\n        paddingRight: \"1em\",\n        borderLeft:\"1px solid grey\",\n    }\n\n    const ROW_HEAD_STYLE = {\n        paddingLeft: \"0.5em\",\n        paddingRight: \"0.5em\",\n        borderTop:\"1px solid grey\",\n    }\n\n    /**\n     * Event handler passed from parent component to child component \n     * \n     * @param {*} e \n     *                  the event\n     * \n     * @param {*} i \n     *                  the row location in the 2D array that is being changed\n     * \n     * @param {*} j \n     *                  the column location in the 2D array that is being changed\n     * \n     * @returns void\n     */\n    function handleChange(e,i,j) {\n        const newData = e.target.value\n        if ((isNaN(newData)) || (newData === undefined)) return;\n        let newArray = []\n        for(let i = 0; i < props.array.length; i++) {\n            newArray[i] = props.array[i].slice(0);\n        }\n        newArray[i][j] = parseInt(newData)\n        props.setMatrix(newArray)\n        props.setEdited(true)\n        \n    }\n\n    const factorHeaders = props.factors.map(data => (\n        <OverlayTrigger\n            placement=\"top\"\n            key={\"ot-\" + data.shortFactorName}\n            overlay={\n                <Tooltip key={\"tt-\" + data.shortFactorName}>\n                    {data.longFactorName}\n                </Tooltip>\n            }>\n            <th style={COL_HEAD_STYLE} key= {\"th-\" + data.shortFactorName}>\n                {data.shortFactorName}\n            </th>\n        </OverlayTrigger>\n    ))\n\n    // Below is all of the HTML/JSX used to actually draw out the component\n    const td = props.factors.length === 0 ? <></> : <td/>\n    const rows = []\n    let columns;\n    if (props.array.length !== 0) {\n        const maxmin = findMaxMin([].concat(...props.array), (e) => Math.abs(e))\n        columns =                    \n        <tr key={\"tr-top-row\"}>\n            {td}\n            { factorHeaders }\n        </tr>\n        for(let i = 0; i <props.factors.length; i++) {\n            rows.push(\n                <tr key={\"tr-row:\" + i}>\n                    <OverlayTrigger\n                        placement=\"left\"\n                        key={\"ot-row:\" + props.factors[i].shortFactorName}\n                        overlay={\n                            <Tooltip key={\"tt-row:\" + props.factors[i].shortFactorName}>\n                                {props.factors[i].longFactorName}\n                            </Tooltip>\n                        }>\n                        <th style={ROW_HEAD_STYLE} key= {\"th-row:\" +props.factors[i].shortFactorName}>\n                            {props.factors[i].shortFactorName}\n                        </th>\n                    </OverlayTrigger>\n                    {   \n                        props.array[i].map((element, j) => (\n                                <Cell\n                                    data={element}\n                                    color={props.heatmap(Math.abs(element), maxmin.min, maxmin.max)}\n                                    x = {i}\n                                    y = {j}\n                                    key={\"Cell-\" + i + \":\" + j}\n                                    onChange = { (e) => handleChange(e, i, j)}\n                                />\n                         ))\n                    }\n            </tr>\n            )\n        }\n        return (\n            <div>\n                <table className='lines'>\n                    <thead>\n                        {columns}\n                    </thead>\n                    <tbody>\n                        {rows}\n                    </tbody>\n                </table>\n            </div>\n        )\n    } else {\n        return <h1>No data!</h1>\n    }\n}\n\nexport default EditableMatrix","\nimport React, { useState } from \"react\"\n\nimport EditableMatrix from \"../EditableMatrix\"\n\nimport {Button, ButtonGroup, ToggleButton, ToggleButtonGroup, OverlayTrigger, Popover} from 'react-bootstrap'\nimport Matrix from \"../Matrix\"\nimport { setDirectMatrix } from \"../../resources/project\"\n\n\nlet { deepCopy,  }  = require('../../resources/utils')\n\nfunction EditMatrixPage(props) {\n\n    //Used to react to changes when the matrix is edited\n    const [isEdited, setEdited] = useState(false)\n    const [matrix, setMatrix] = useState(props.project.editArrayObj)\n    const [toggleStates, setToggleStates] = useState([false, false, false])\n    const [isBatch, setBatch] = useState(false)\n\n    const handleSave = () => {\n\n        props.setProject(setDirectMatrix(matrix))\n        setEdited(false)\n    }\n\n    const handleUndoRecent = () => {\n        setEdited(false)\n\n        setMatrix(props.project.direct.matrix)\n        setToggleStates([false, false, false])\n    }\n\n    const handleRevert = () => {\n        setEdited(false)\n\n        setMatrix(props.project.originalMatrix)\n        setToggleStates([false, false, false])\n        handleSave()\n    }\n\n    const handleRemoveAll = (btn) => {\n        let states = [...toggleStates]\n        states[btn.value - 1] = btn.checked\n\n        let removalResult = deepCopy(props.project.direct.matrix)\n        for(let i = 0; i < removalResult.length; i++) {\n            for(let j = 0; j < removalResult[i].length; j++) {\n                removalResult[i][j] = (states[Math.abs(removalResult[i][j]) - 1]) ? 0 : removalResult[i][j]\n            }\n        }\n        setEdited(true)\n        setMatrix(removalResult)\n        setToggleStates(states)\n    }\n\n    const toggles = [1, 2, 3].map((e, index) => \n        <ToggleButton\n            type=\"checkbox\"\n            checked={toggleStates[index]} \n            key={e} \n            id={e} \n            value={e} \n            variant=\"outline-primary\"\n            onChange={event => handleRemoveAll(event.target)}  \n        >\n            { e }\n        </ToggleButton>\n    )\n\n    const switchButtons = [\"Individual Edit\", \"Batch Edit\"].map(e => \n        <ToggleButton \n            key={e} \n            id={e} \n            value={e} \n            variant=\"outline-primary\"  \n            onClick={() => setBatch(e === \"Batch Edit\")}\n        >\n            { e }\n        </ToggleButton>\n    )\n\n    const undoPopover = (\n        <Popover id=\"popover-basic\">\n          <Popover.Header as=\"h3\">Warning</Popover.Header>\n          <Popover.Body>\n            {/* TODO write actual explanation... */}\n            Some weird shit going on here...Make sure you understand what these buttons do. TODO: Write actual explanation...\n          </Popover.Body>\n        </Popover>\n    )\n\n    const revertPopover = (\n        <Popover id=\"popover-basic\">\n          <Popover.Header as=\"h3\">Warning</Popover.Header>\n          <Popover.Body>\n              {/* TODO write actual explanation... */}\n            Some weird shit going on here...Make sure you understand what these buttons do. TODO: Write actual explanation...\n          </Popover.Body>\n        </Popover>\n    )\n \n\n    return  <div className=\"container\">\n                <div className=\"centered\">           \n                    <Button variant=\"outline-primary\" onClick={handleSave} disabled={!isEdited}>Save</Button>{' '}\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        \n                        overlay={\n                            undoPopover\n                        }>\n                        <Button variant=\"outline-primary\" onClick={handleUndoRecent} disabled={!isEdited}>Revert to Last Save</Button>\n                    </OverlayTrigger>\n                    {' '}\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={\n                            revertPopover\n                        }>\n                        <Button variant=\"outline-primary\" onClick={handleRevert} disabled={!isEdited}>Revert to Original</Button>\n                    </OverlayTrigger>\n                </div> \n                <br />\n                <div className=\"centered\"> \n                    <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={\"Individual Edit\"}>\n                        {switchButtons}\n                    </ToggleButtonGroup>\n                </div>\n                <br/> \n                { \n                    isBatch &&\n                    <div>\n                        Remove all:{' '} \n                        <ButtonGroup type=\"checkbox\" name=\"options\">\n                            {toggles}\n                        </ButtonGroup>\n                        <br />\n                        <br />\n                    </div>\n                }\n                {   \n                    isBatch ? \n                        <Matrix\n                            project={props.project} \n                            array={matrix} \n                            factors={props.project.factorNames} \n                            heatmap={props.settings.heatmap}\n                            />\n                        :\n                        <EditableMatrix \n                            array={matrix} \n                            factors={props.project.factorNames} \n                            heatmap={props.settings.heatmap.func}\n                            setEdited={setEdited}\n                            setMatrix={setMatrix}\n                            /> \n                }\n            </div>\n\n\n}\n\nexport default EditMatrixPage","/*\nParticipatory Factor Mapping Software\nWinter - Spring 2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nimport React from \"react\"\nimport FactorInfoOverlay from \"./FactorInfoOverlay\"\n\nfunction Loop(props) {\n    \n  const ICON_STYLE = {\n    fontSize: \"x-large\", \n    fontWeight:\"bold\",\n  }\n\n    let sign = props.element.signum > 0 ?\n                <i className=\"bi bi-arrow-counterclockwise\" style={ICON_STYLE}/> :\n                <i className=\"bi bi-arrow-clockwise\" style={ICON_STYLE}/>\n\n    let vertices = props.element.loop.map((vertex, index) => {\n      const element = <span>\n                        <Node name={vertex} key={`nd-${props.count}-${vertex}`}/>\n                      </span>\n      return  <span>\n\n              <FactorInfoOverlay \n                              placement=\"bottom\"\n                              colorClass=\"primary\"\n                              shortFactorName={vertex} \n                              longFactorName={props.nameMap.get(vertex)}\n                              info={props.rankMap.get(vertex)} \n                              factorCount={props.nameMap.length} \n                              element={element} />\n              { \n                index < props.element.loop.length - 1 ?\n                  <i className=\"bi bi-arrow-right-short\" style={{fontSize: \"x-large\",}}/> : \n                  <i className=\"bi bi-box-arrow-in-right\" style={{fontSize: \"x-large\",}}/>\n              }\n      </span> \n})\n\n    const myStyle = {\n        borderRadius: \"25px\",\n        padding: \"10px\",\n        fontFamily: \"Sans-Serif\",\n        margin: \"5px\"\n      }\n\n    return <div>\n                <label>\n                    <span style={myStyle}>{`Loop ${props.count + 1} - `}{sign}{` - ${props.element.strength.toFixed(4)}`}</span>\n                    <br />\n                    <br />\n                    {vertices}\n                </label>\n                <hr />\n          </div>;\n  }\n\n  function Node(props) {\n    const myStyle = {\n        borderRadius: \"25px\",\n        color: \"white\",\n        backgroundColor: \"DodgerBlue\",\n        padding: \"10px\",\n        fontFamily: \"Sans-Serif\",\n        margin: \"5px\"\n      }\n    return <span style={myStyle}>{props.name}</span>\n  }\n  \n  export default Loop;","\nimport React,  {useState} from \"react\"\nimport PFMS from 'pfms'\nimport { OverlayTrigger, Collapse, Button, Container, Row, Col, Spinner, Popover, ToggleButtonGroup, ToggleButton } from 'react-bootstrap'\nimport Loop from \"../Loop.js\"\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n  \nimport { getComplexity } from \"../../resources/utils.js\"\nimport { setMaxLoopLength, setMaxLoopCount, setLoopFactor, setLoopAlgorithm, setLoopsAnalyzing, setLoopsWeight, setCurrentLoop } from \"../../resources/project.js\"\n\n\n/* Setting up Map used for rank preference - this needs to be pushed to the library...*/\nconst algorithmMap = new Map()\nalgorithmMap.set('Average Strength', PFMS.genClsAvgEdgeWeight)\nalgorithmMap.set('Total Strength', PFMS.genClsTotalEdgeWeight)\nalgorithmMap.set('Centrality via Edge Weight x Left Eigenvector', PFMS.genClsAvgEdgeWeightProdPageRank)\nalgorithmMap.set('Centrality via Edge Weight x Right Eigenvector', PFMS.genClsAvgEdgeWeightProdEigen)\nalgorithmMap.set('Centrality via Right Eigenvector (no Edge Weight)', PFMS.genClsAvgVertexEigen)\n\n\nfunction FeedbackLoopsPage(props) {\n\n    const LINK_STYLE =  {\n        cursor: \"pointer\"\n      }\n\n    // const [open, setOpen] = useState(props.project.feedbackLoops.loops.both.length === 0)\n    const [open, setOpen] = useState(true)\n    const [loopSelection, setLoopSelection] = useState(2)\n\n    const factorNameMap = new Map(\n        props.project.factorNames.map(obj => {\n            return [obj.shortFactorName, obj.longFactorName]\n        }),)\n\n    function handleLengthSelection (e) {\n        props.setProject(setMaxLoopLength(e.target.value))\n    }\n\n    function handleWeightSelection (e) {\n        props.setProject(setLoopsWeight(e.target.value))\n    }\n\n    function handleCountSelection (e) {\n        props.setProject(setMaxLoopCount(e.target.value))\n    }\n\n    function handleFactorSelection (e) {\n        props.setProject(setLoopFactor(e.target.value))\n    }\n\n    function handleAlgorithmSelection (e) {\n        props.setProject(setLoopAlgorithm(e.target.value))\n    }\n\n    function setAnalyzing(isAnalyzing) {\n        props.setProject(setLoopsAnalyzing(isAnalyzing))\n    }\n\n    function handleAnalyze() {\n        setAnalyzing(true)\n        const shortFactorNames = props.project.factorNames.map(e => e.shortFactorName)\n\n        const payload = {\n            adjacency: props.project.graph.unweightedAdjacency, \n            matrix: props.project.feedbackLoops.options.loopWeight === \"Direct Matrix\" ? props.project.direct.matrix : props.project.indirect.matrix,\n            factorNames: shortFactorNames,\n            factor:props.project.feedbackLoops.options.factor,\n            maxLoopLength: props.project.feedbackLoops.options.loopLength,\n            algorithmName: props.project.feedbackLoops.options.weightAlgorithm,\n            maxLoopCount: props.project.feedbackLoops.options.loopCount\n          }\n\n          props.requestLoops(payload)\n      }\n\n    const lengths = []\n    for (let i = 2; i <= props.project.factorNames.length; i++) {\n        lengths.push(<option value={i} key={`op-loop-length-${i}`}>{i}</option>)\n    }\n\n    const factors = props.project.factorNames.map(element => \n        <option value = {element.shortFactorName} key={`opt-factor-${element.shortFactorName}`}>\n            {element.shortFactorName}\n        </option>\n    )\n\n    const algorithms = Array.from(algorithmMap).map(([key, value]) =>\n        <option value = {key} key={`opt-algorithm-${key}`}>{key}</option>\n    )\n\n    const loopCounts = [5, 10, 25].map(count => \n        <option value = {count} key={`opt-loopCount-${count}`}>{count}</option>\n    )\n\n    const loopWeights = [\"Direct Matrix\", \"Indirect Matrix\"].map(matrix => \n        <option value = {matrix} key={`opt-loopWeights-${matrix}`}>{matrix}</option>\n    )\n\n    // const toggles = [\n    //     <ToggleButton\n    //         type=\"radio\"\n    //         key={\"Reinforcing\"} \n    //         id={\"Reinforcing\"} \n    //         value={1} \n    //         variant=\"outline-primary\"\n    //         onChange={event => {setLoopSelection(parseInt(event.target.value))}}>\n    //             <>Reinforcing <i className=\"bi bi-arrow-counterclockwise\"/></>\n    //     </ToggleButton>,\n    //     <ToggleButton\n    //         type=\"radio\"\n    //         key={\"Both\"} \n    //         id={\"Both\"} \n    //         value={2} \n    //         variant=\"outline-primary\"\n    //         onChange={event => {setLoopSelection(parseInt(event.target.value))}} >\n    //             <>Both</>\n    //     </ToggleButton>,\n    //     <ToggleButton\n    //         type=\"radio\"\n    //         key={\"Balancing\"} \n    //         id={\"Balancing\"} \n    //         value={3} \n    //         variant=\"outline-primary\"\n    //         onChange={event => {setLoopSelection(parseInt(event.target.value))}}>\n    //             <><i className=\"bi bi-arrow-clockwise\"/> Balancing</>\n    //     </ToggleButton>\n    // ]\n\n    \n    function displayEstTimeComplexity() {\n        const complexity = getComplexity(props.project.factorNames.length, props.project.feedbackLoops.options.loopLength, props.project.graph.percentageConnected)\n\n        const className = complexity < 1000000 ? \"bg-success text-white\" : complexity < 10000000 ? \"bg-warning text-dark\" : \"bg-danger text-white\"\n        const icon = complexity < 1000000 ? \"bi bi-check-circle-fill\" : complexity < 10000000 ? \"bi bi-exclamation-triangle\" : \"bi bi-exclamation-octagon-fill\"\n        const spanWidth = complexity < 1000000000 ? \"7em\" : \"10em\"\n\n        const STYLE =  {\n            width: spanWidth, \n            display: \"inline-block\", \n            cursor: \"pointer\"\n        }\n\n        // console.log(`complexity: ${complexity} length: ${props.project.feedbackLoops.options.loopLength}`)\n\n        return  <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={\n                    <Popover id=\"popover-basic\">\n                        <Popover.Header as=\"h3\" className={className}><i className={icon} style={{paddingRight:\"2em\"}}/>    Time Complexity</Popover.Header>\n                        <Popover.Body>\n                            Wording about how long the user should expect this to take!\n                            <br />\n                            Here are some suggestions for lowering the time complexity:\n                            <br />\n                            * Shorter maximum loop length\n                            <br />\n                            * Remove some of the connectivity from the graph\n                        </Popover.Body>\n                    </Popover> }>\n                    <span className={className} style={STYLE}>\n                            {complexity.toLocaleString(undefined, { minimumFractionDigits:0})}\n                        </span> \n                </OverlayTrigger>\n    }\n\n    let loopsArray = []\n    let loopComps\n    let toggles\n    let description\n    if(props.project.feedbackLoops.foundLoops.length > 0) {\n        toggles = [\n            <ToggleButton\n                type=\"radio\"\n                key={\"Reinforcing\"} \n                id={\"Reinforcing\"} \n                value={1} \n                variant=\"outline-primary\"\n                onChange={event => {setLoopSelection(parseInt(event.target.value))}}>\n                    <>Reinforcing <i className=\"bi bi-arrow-counterclockwise\"/></>\n            </ToggleButton>,\n            <ToggleButton\n                type=\"radio\"\n                key={\"Both\"} \n                id={\"Both\"} \n                value={2} \n                variant=\"outline-primary\"\n                onChange={event => {setLoopSelection(parseInt(event.target.value))}} >\n                    <>Both</>\n            </ToggleButton>,\n            <ToggleButton\n                type=\"radio\"\n                key={\"Balancing\"} \n                id={\"Balancing\"} \n                value={3} \n                variant=\"outline-primary\"\n                onChange={event => {setLoopSelection(parseInt(event.target.value))}}>\n                    <><i className=\"bi bi-arrow-clockwise\"/> Balancing</>\n            </ToggleButton>\n        ]\n        if(loopSelection === 1) {\n            loopsArray = props.project.feedbackLoops.foundLoops[props.project.feedbackLoops.options.currentLoop].loops.reinforcing\n        } else if (loopSelection === 2) {\n            loopsArray = props.project.feedbackLoops.foundLoops[props.project.feedbackLoops.options.currentLoop].loops.both\n        } else if (loopSelection === 3) {\n            loopsArray = props.project.feedbackLoops.foundLoops[props.project.feedbackLoops.options.currentLoop].loops.balancing\n        }\n        let rankMap =  (props.project.feedbackLoops.options.loopWeight === \"Direct Matrix\") ?\n            props.project.direct.rankMap :\n            props.project.indirect.rankMap\n        loopComps = loopsArray.map((loop, index) => \n            <Loop count={index} element={loop} rankMap={rankMap} nameMap={factorNameMap} key={`loop-${index}`}/>) \n        description =   <p>\n                            {props.project.feedbackLoops.foundLoops[props.project.feedbackLoops.options.currentLoop].factor}{' '}-{' '}\n                            {props.project.feedbackLoops.foundLoops[props.project.feedbackLoops.options.currentLoop].loopLength}{' '}-{' '}\n                            {props.project.feedbackLoops.foundLoops[props.project.feedbackLoops.options.currentLoop].weightAlgorithm}{' '}-{' '}\n                            {props.project.feedbackLoops.foundLoops[props.project.feedbackLoops.options.currentLoop].loopWeight}\n                        </p>\n    }\n\n    const infoLoopLength =  <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={\n                                <Popover id=\"popover-basic\">\n                                    <Popover.Header as=\"h3\" className={\"bg-info text-white\"}><i className=\"bi bi-info-square-fill\" style={{paddingRight:\"2em\"}}/>    Loop Length</Popover.Header>\n                                    <Popover.Body className={\"text-info\"}>\n                                        This setting determines the max number of factors a Loop may contain.  \n                                        <br />\n                                        For large and connected graphs, the number of loops grow exponentially.\n                                        Limiting the max loop length may result in shorter calculation times. \n                                    </Popover.Body>\n                                </Popover> }>\n                                <span style={LINK_STYLE} className={\"text-info\"}>\n                                    maximum<sup><i className=\"bi bi-info-square\" /></sup>\n                                </span>\n                            </OverlayTrigger>\n\n    const infoEstimate =    <OverlayTrigger trigger=\"click\" placement=\"top\" overlay={\n                                <Popover id=\"popover-basic\">\n                                    <Popover.Header as=\"h3\" className={\"bg-info text-white\"}><i className=\"bi bi-info-square-fill\" style={{paddingRight:\"2em\"}}/>Estimate Information</Popover.Header>\n                                    <Popover.Body className={\"text-info\"}>\n                                        We do our best to estimate how long the calculation will take. CS algorithms speak...blah blah blah\n                                        <br />\n                                        More to come...\n                                    </Popover.Body>\n                                </Popover> }>\n                                <span style={LINK_STYLE} className={\"text-info\"}>\n                                    estimate<sup><i className=\"bi bi-info-square\" /></sup>\n                                </span>\n                             </OverlayTrigger>\n\n    return  <div className=\"container\">\n                { props.project.feedbackLoops.foundLoops.length > 0 &&\n                    <Container>\n                        <Button\n                            onClick={() => setOpen(!open)}\n                            variant=\"outline-primary\"\n                            size=\"sm\"\n                            aria-controls=\"example-collapse-text\"\n                            aria-expanded={open} >\n                            Run another analysis{' '}{open ? <i className=\"bi bi-chevron-double-up\" ></i> : <i className=\"bi bi-chevron-double-down\" ></i>}\n                        </Button>\n                        <br />\n                    </Container>\n                }\n                <Collapse in={open}>\n                    <div>            \n                        <label>Choose a factor to analyze:</label>{' '}\n                        <select id='factor_to_analyze' name='factor_to_analyze' defaultValue={props.project.feedbackLoops.options.factor} onChange={(e) => handleFactorSelection(e)}>\n                            {factors}\n                        </select>\n                        {' '}\n                        <i className=\"bi bi-arrow-right-short\" style={{paddingLeft:\".5em\", paddingRight:\".5em\"}}/>\n                        {props.project.factorNames.filter(e => e.shortFactorName === props.project.feedbackLoops.options.factor).map(e => e.longFactorName)[0]}\n                        <br />\n                        <label> Loop {infoLoopLength} length:</label>{' '}\n                        <select id='loop_length' name='loop_length' defaultValue={props.project.feedbackLoops.options.loopLength} onChange={(e) => handleLengthSelection(e)}>\n                            {lengths}\n                        </select>\n                        <br/>\n                        <label>Number of Loops to return:</label>{' '}\n                        <select id='loop_count' name='loop_count' defaultValue={props.project.feedbackLoops.options.loopCount} onChange={(e) => handleCountSelection(e)}>\n                            {loopCounts}\n                        </select>\n                        <br/>\n                        <label>Algorithm Preference:</label>{' '}\n                        <select id='algorithm' name='algorithm' defaultValue={props.project.feedbackLoops.options.weightAlgorithm} onChange={(e) => handleAlgorithmSelection(e)}>\n                            {algorithms}\n                        </select>\n                        <br />\n                        <label>Matrix weights: </label>{' '}\n                        <select id='weights' name='weights' defaultValue={props.project.feedbackLoops.options.loopWeight} onChange={(e) => handleWeightSelection(e)}>\n                            {loopWeights}\n                        </select>\n                        <br />\n                        <label>The {infoEstimate} time complexity of analysis is: {displayEstTimeComplexity()}</label>{' '}\n                        <br />\n                        <Button \n                            id='feedbackbutton'\n                            name='fbbutton' \n                            variant=\"outline-primary\"\n                            size=\"sm\"\n                            disabled={props.project.feedbackLoops.options.isAnalyzing} \n                            onClick={() => handleAnalyze()}>\n                                Analyze{' '}\n                                { props.project.feedbackLoops.options.isAnalyzing && <Spinner\n                                    as=\"span\"\n                                    animation=\"border\"\n                                    size=\"sm\"\n                                    role=\"status\"\n                                    aria-hidden=\"true\"\n                                    />}\n                        </Button>\n                        <Container>\n                            <Row>\n                                <Col sm={2}></Col>\n                                <Col sm={4}>\n                                    <div className=\"d-grid gap-2\">\n                                        \n                                    </div>\n                                </Col>\n                                <Col sm={2}></Col>\n                            </Row>\n                        </Container>\n                    </div>\n                </Collapse>\n                <br />\n\n                {props.project.feedbackLoops.foundLoops.length > 0 &&\n                    <div>\n                        <Button\n                            style={{marginRight:\"1em\"}}\n                            key={\"pre\"} \n                            id={\"prev\"} \n                            variant=\"outline-primary\"\n                            disabled={props.project.feedbackLoops.options.currentLoop === 0}\n                            onClick={event => {props.setProject(setCurrentLoop(props.project.feedbackLoops.options.currentLoop - 1))}}>\n                                <><i className=\"bi bi-chevron-double-left\"/> Previous</>\n                        </Button>\n                        <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={2}>\n                            {toggles}\n                        </ToggleButtonGroup>\n                        <Button\n                            style={{marginLeft:\"1em\"}}\n                            key={\"nxt\"} \n                            id={\"next\"} \n                            variant=\"outline-primary\"\n                            disabled={props.project.feedbackLoops.options.currentLoop === props.project.feedbackLoops.foundLoops.length - 1}\n                            onClick={event => {props.setProject(setCurrentLoop(props.project.feedbackLoops.options.currentLoop + 1))}}>\n                                <>Next <i className=\"bi bi-chevron-double-right\"/></>\n                        </Button>   \n                        <br />\n                    {description}\n                    {loopComps}\n                    </div>\n                }\n\n\n            </div>\n}\n\nexport default FeedbackLoopsPage","/*\nParticipatory Factor Mapping Software\nWinter - Spring 2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nimport React, { useState, useEffect, useRef } from \"react\"\nimport axios from 'axios'\nimport { Container, Nav, Navbar, NavDropdown } from \"react-bootstrap\"\nimport { DropdownSubmenu, NavDropdownMenu} from \"react-bootstrap-submenu\";\n\nimport InputFilePage from './pages/InputFilePage.js'\nimport IndirectPage from \"./pages/IndirectPage.js\"\nimport DirectPage from \"./pages/DirectPage.js\"\nimport CentralityPage from \"./pages/CentralityPage.js\"\nimport UnderConstructionPage from \"./pages/ConstructionPage.js\"\nimport HomePage from \"./pages/HomePage.js\"\nimport InfluencePage from \"./pages/InfluencePage.js\"\nimport SettingsPage from \"./pages/SettingsPage.js\"\nimport AllPage from \"./pages/AllPage.js\"\nimport EditMatrixPage from \"./pages/EditMatrixPage.js\"\nimport FeedbackLoopsPage from \"./pages/FeedbacksLoopPage.js\"\n\nimport {heatmaps} from \"../resources/color.js\"\nimport { EMPTY_PROJECT, setLoopsResult } from \"../resources/project.js\"\nimport { loadProjectFromCSV, loadProjectFromPmf, minifyProject } from '../resources/project'\n\n\n/*\n CSS Imports\n*/\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap-icons/font/bootstrap-icons.css'\nimport 'react-bootstrap-submenu/dist/index.css'\n\n\nfunction App() {\n\n    const doFileDownload = useRef(null)\n    const doFileUpload = useRef(null)\n\n    //The initial empty project. All fields loaded in Input.js component. \n    let initialProject = EMPTY_PROJECT\n\n    useEffect(() => {\n        const wakeUpHeroku = async () => {\n            await axios.get(\n              `https://cfb3-tcss450-labs-helloworld.herokuapp.com/hello`,\n            ).then(result => {\n                //we literally don't care\n            }).catch(err => {\n                //TODO Add error handling\n                console.log(err)\n            })\n          }\n          wakeUpHeroku()\n    }, [])\n\n    //Used to store the \"project\"\n    const [project, setProject] = useState(initialProject)\n    const [isLoaded, setLoaded] = useState(false)\n    const [settings, setSettings] = useState({heatmap:heatmaps[0],})\n    const [fileDownloadUrl, setFileDownloadUrl] = useState(\"\")\n\n    //Used to store the current navigation location\n    // const [nav, setNav] = useState(\"home\")\n    const [nav, setNav] = useState(\"home\")\n\n    useEffect(() => {\n        if(fileDownloadUrl !== \"\") {\n            console.log(\"download the file: \" + fileDownloadUrl)\n            doFileDownload.current.click()\n            URL.revokeObjectURL(fileDownloadUrl)\n            setFileDownloadUrl(\"\")\n        }\n    }, [fileDownloadUrl])\n\n    \n    function requestLoops(payload) {\n        // console.log(payload)\n        const fetchData = async () => {\n            await axios.post(\n              //'http://localhost:5000/calculateLoops',  \n             `https://cfb3-tcss450-labs-helloworld.herokuapp.com/calculateLoops`,\n              payload\n            ).then(result => {\n                setProject(setLoopsResult(result.data.loops))\n            }).catch(err => {\n                //TODO Add error handling\n                console.log(err)\n            }) \n          }\n          fetchData()\n    }\n\n   \n    function onSaveClick() {\n        let output = JSON.stringify(minifyProject(project), \n            null, 4);\n        const blob = new Blob([output]);\n        setFileDownloadUrl(URL.createObjectURL(blob))\n    }\n\n    function onLoadClick() {\n        doFileUpload.current.click()\n    }\n\n    let showFile = async (e) => {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n            let name = document.getElementById('fileInput').files.item(0).name.split('.')\n            let extension = name[name.length - 1]\n            if(extension === \"csv\") {\n                setProject(loadProjectFromCSV(e.target.result))\n                setLoaded(true)\n                setNav(\"direct\")\n            } else if(extension === \"pmf\") {\n                setProject(loadProjectFromPmf(JSON.parse(e.target.result)))\n                setLoaded(true)\n                setNav(\"direct\")\n            }\n        }\n        reader.readAsText(e.target.files[0])\n        \n    }\n\n    function renderOnNavSelected(location) {\n        switch(location) {\n            case \"home\":\n                return <HomePage matrix={project} setProject={setProject} />\n            case \"loadfile\":\n                return <InputFilePage matrix={project} setProject={setProject} setNav={() => setNav(\"direct\")} setLoaded={setLoaded} />\n            case \"direct\":\n                return <DirectPage project={project} setProject={setProject} settings={settings} /> \n            case \"indirect\":\n                return <IndirectPage project={project} setProject={setProject} settings={settings} />    \n            case \"edit\":\n                return <EditMatrixPage project={project} setProject={setProject} settings={settings} />    \n            case \"eigen\":    \n                return <CentralityPage project={project} setProject={setProject} settings={settings}/> \n            case \"influence\":\n                return <InfluencePage project={project} setProject={setProject} settings={settings} />\n            case \"all\":\n                return <AllPage project={project} setProject={setProject} settings={settings} />\n            case \"fbloops\":\n                return <FeedbackLoopsPage project={project} setProject={setProject} settings={settings} requestLoops={requestLoops}/>   \n            case \"cld\":\n                return <UnderConstructionPage pagename=\"Causal Loop Diagram\"/>   \n            case \"other\":\n                return <UnderConstructionPage pagename=\"Other Visualizations\"/>   \n            case \"settings\":\n                return <SettingsPage project={project} setProject={setProject} settings={settings} setSettings={setSettings}/>\n            case \"aboutUs\":\n                return <UnderConstructionPage pagename=\"We made this\"/> \n            case \"pfmTheory\":\n                return <UnderConstructionPage pagename=\"Civil Engineering Speak\"/> \n            case \"graphTheory\":\n                return <UnderConstructionPage pagename=\"Computer Science Speak\"/> \n            case \"glossary\":\n                return <UnderConstructionPage pagename=\"Define these terms!?!?\"/> \n\n            default:\n                return  \n            }\n    }\n\n    return (\n        <>\n            <a className=\"hidden\" \n                //hidden anchor tag used to download the project\n                style={{display:\"none\",}}\n                download={project.projectName + \".pmf\"}\n                href={fileDownloadUrl}\n                ref={doFileDownload}>\n                    download it\n            </a>\n            <input ref={doFileUpload} \n                //hidden input to load files from \n                style={{display:\"none\",}} \n                type=\"file\" \n                id=\"fileInput\" \n                onChange = {(e) => showFile(e)} \n                accept='.csv, .pmf'\n                />\n            <Navbar collapseOnSelect bg=\"light\" expand=\"xl\" sticky=\"top\" style={{paddingLeft:\"1em\"}} >\n                <Navbar.Brand><i className=\"bi bi-mortarboard\" style={{paddingRight:\".5em\"}}/>UWT-SET PFMS</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\"\n                    justify variant=\"tabs\" \n                    activeKey={nav}\n                    onSelect={(selectedKey) => setNav(selectedKey)}>\n                    <NavDropdownMenu title=\"Project\" id=\"collapsible-nav-dropdown\">\n                        <DropdownSubmenu title=\"Load\" id=\"collapsible-nav-dropdown-sub-load\">\n                            <NavDropdown.Item onClick={onLoadClick} >From File</NavDropdown.Item>\n                            <NavDropdown.Item eventKey=\"loadserver\" disabled=\"false\">From Server</NavDropdown.Item>\n                        </DropdownSubmenu>\n                        <DropdownSubmenu title=\"Save\" id=\"collapsible-nav-dropdown-sub-save\">\n                            <NavDropdown.Item onClick={onSaveClick} >To File</NavDropdown.Item>\n                            <NavDropdown.Item eventKey=\"saveserver\" disabled=\"false\">To Server</NavDropdown.Item>\n                        </DropdownSubmenu>\n                        <NavDropdown.Item eventKey=\"create\" disabled=\"false\">Create</NavDropdown.Item>\n                    </NavDropdownMenu>\n                    <NavDropdown title=\"Matrix\"  disabled={!isLoaded} id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"direct\" disabled={!isLoaded}>Direct</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"indirect\" disabled={!isLoaded}>Indirect</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"edit\" disabled={!isLoaded}>Edit</NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Information\" disabled={!isLoaded} id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"eigen\" disabled={!isLoaded}>Eigen</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"influence\" disabled={!isLoaded}>Influence</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"all\" disabled={!isLoaded}>All</NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Analyze\" disabled={!isLoaded} id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"fbloops\" disabled={!isLoaded}>Feedback Loops</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"cld\" disabled={!isLoaded}>Causal Loop Diagram</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"other\" disabled={!isLoaded}>Other Visualizations</NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"About\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"aboutUs\" >About Us</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"pfmTheory\" >About PFM</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"graphTheory\" >Graph Theory</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"glossary\" >Glossary</NavDropdown.Item>\n                    </NavDropdown>\n                    <Nav.Link eventKey=\"settings\"><i className=\"bi bi-gear-fill \" ></i></Nav.Link>\n                    \n                </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n            <div>{ renderOnNavSelected(nav) }</div>\n        </>\n    )\n    \n}\n\n  \nexport default App","/*\nBryce Fujita\nParticipatory Factor Mapping Software\nWinter 2022\nTCSS 498\nProfessor: Charles Bryan\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import Input from './components/input.js'\nimport App from './components/App.js'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);","const tc = require(\"tinycolor2\")\n\n/* Arrow function for setting up enumerations. */\nconst enumValue = (name) => Object.freeze({toString: () => name})\n\n/* Setup Color enumerations to be used in other components. */\nexport const Colors = Object.freeze({\n    PRIMARY: enumValue('#4b2e83'),  //UW purple\n    SECONDARY: enumValue('#b7a57a'),  //UW Gold\n    LIGHT: enumValue('white'),  //Generic White\n    DARK: enumValue('black'),   //Generic Black\n    RED: enumValue('red'),      //Generic Red\n    BLUE: enumValue('blue')     //Generic Blue\n})\n\n/**\n * Function used to find the min and max value of a 2D array\n * \n * @param {*} array\n *                  an unordered 2D array of real numbers \n *                       ex: [[0, 3, -1],\n *                           [1, 0, -3],\n *                           [0, 3,  0]]\n * @param {*} getData\n *                  a function which decides how to sort the 2D array\n * @returns an object with the following key:value pairs:\n *                  min: a number representing the minimum value of the 2D array\n *                  max: a number representing the maximum value of the 2D array\n */\nexport function findMaxMin(array, getData) {\n    let temp = array.map(e => getData(e))\n    .filter(element => element !== 0) \n    let returnMe = {\n        min: Math.min.apply(null, temp),\n        max: Math.max.apply(null, temp)\n    }\n    return returnMe\n}\n\n/**\n * Function used to determine what color to give to a value for a heatmap\n * \n * @param {*} value\n *                  any real number used to evaluate what color to assign it for a heat map\n * \n * @param {*} maxmin\n *                  an object with the following key:value pairs:\n *                      min: a number representing the minimum value of the 2D array\n *                      max: a number representing the maximum value of the 2D array\n * \n * @returns an object with the following key:value pairs:\n *                      red: a number between 0 - 255 representing the amount of red in a color\n *                      blue: a number between 0 - 255 representing the amount of blue in a color\n *                      green: a number between 0 - 255 representing the amount of green in a color\n */\nexport function calculateColor (value, maxmin) {\n    if(value === 0) return {\n        red: 0,\n        green: 0,\n        blue: 0,\n    }\n    let offset = maxmin.min * -1\n    let difference = (maxmin.max - maxmin.min)\n    let percent = ((value + offset) % (difference+1)) / (difference + 1);\n    let r = 0, g = 0, b = 0;\n    if(0 <= percent && percent <= 0.125) {\n        b = 4 * percent + 0.5;\n    } else if(0.125 <= percent && percent <= 0.375) {\n        g = 4 * percent - 0.5;\n        b = 1;\n    } else if(0.375 <= percent && percent <= 0.625) {\n        r = 4 * percent - 1.5;\n        g = 1;\n        b = -4 * percent + 2.5;\n    } else if(0.625 <= percent && percent <= 0.875) {\n        r = 1;\n        g = -4 * percent + 3.5;\n    } else if(0.875 <= percent && percent <= 1) {\n        r = -4 * percent + 4.5;\n    }\n    else {\n        r = g = b = 1;\n    }\n    r *= 255;\n    g *= 255;\n    b *= 255;\n    return {\n        red: r,\n        green: g,\n        blue: b,\n    };\n}\n\n/**\n * Function used to determine which color to be used for text based on background color\n * \n * @param {*} theColor\n *                  background color used to determine what color to be used for text\n * \n * @returns a color to be used for text\n */\nexport function calculateTextColor(theColor) {\n    const a = 1 - ((0.299 * theColor.red) + (0.587 * theColor.green) + (0.114 * theColor.blue))/255\n    return a < 0.5 ? Colors.DARK : Colors.LIGHT\n}\n\nexport function heatMapNoColor(value, min, max) {\n    if (value === 0) {\n        return {h:0, s:1, l:0}\n    }\n    return {h:0, s:1.0, l:1.0}\n}\n\nexport function heatMapBlues(value, min, max) {\n    if (value === 0) {\n        return {h:0, s:1, l:0}\n    } else if (min === max) {\n        return {h:250 / 360, s:.5, l:.75}\n    }\n    const range = Math.abs(max - min)\n    const norm = (value - min) / range\n    let hsl = {h:0, s:.5, l:.75}\n    hsl.h = ((Math.abs(norm) * 60) + 190) / 360\n    return hsl\n}\n\nexport function heatMapReds(value, min, max) {\n    if (value === 0) {\n        return {h:0, s:1, l:0}\n    } else if (min === max) {\n        return {h:1 / 360, s:.85, l:.7}\n    }\n    const range = Math.abs(max - min)\n    const norm = (value - min) / range\n    const scale = (25 - range / 2 * 25) < 0 ? 25 : (25 - range / 2 * 25)\n    let hsl = {h:0, s:.85, l:.7}\n    hsl.h = (Math.abs(1 - norm) * (35 + scale)) / 360\n    return hsl\n}\n\nexport function heatMapGreens(value, min, max) {\n    if (value === 0) {\n        return {h:0, s:1, l:0}\n    } else if (min === max) {\n        return {h:120 / 360, s:.75, l:.75}\n    }\n    const range = Math.abs(max - min)\n    const norm = (value - min) / range\n    let hsl = {h:0, s:.75, l:.75}\n    hsl.h = ((Math.abs(norm) * 60) + 60) / 360\n    return hsl\n}\n\nexport function getComplement(hsl) {\n    let r = {...hsl}\n    if(tc.fromRatio(r).isLight()) {\n        r.l = .05\n    } else {\n        r.l = .95\n    }\n    return r\n}\n\nexport function hslToString(hsl) {\n    return `hsl(${hsl.h * 360}, ${hsl.s * 100}%, ${hsl.l * 100}%)`\n}\n\nexport function calculateGradient(hsl) {\n    let a = tc.fromRatio(hsl).toHexString()\n    // let b = tc.fromRatio(hsl).lighten().toHexString()\n    // return  `linear-gradient(to right, ${a}, ${a} 10%, ${b} 10%, ${b} 90%, ${a} 90%)`\n    let b = tc.fromRatio(hsl).lighten().lighten().lighten().toHexString()\n    return  `radial-gradient(circle, ${b}, ${a} 70%)`\n    // let b = tc.fromRatio(hsl).lighten().lighten().toHexString()\n    // return  `repeating-linear-gradient(45deg, ${a}, ${a} 12px, ${b} 3px, ${b} 15px)`\n}\n\nexport const heatmaps = [{name:\"Reds\", colorClass:\"danger\", func:heatMapReds}, \n                            {name:\"Blues\", colorClass:\"primary\", func:heatMapBlues},\n                            {name:\"Greens\", colorClass:\"success\", func:heatMapGreens},  \n                            {name:\"No Color\", colorClass:\"secondary\", func:heatMapNoColor}]"],"sourceRoot":""}